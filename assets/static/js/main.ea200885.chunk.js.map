{"version":3,"sources":["libraries/network-error-handling.js","pages/config.js","libraries/socket.js","pages/Authentication.js","pages/sub-pages/ProjectsTabs/Overview.js","components/CreateBug.js","components/BugDiscussion.js","components/BugStats.js","components/BugAssignedTo.js","components/BugDescription.js","components/BugFiles.js","pages/sub-pages/ProjectsTabs/ViewBug.js","components/BugList.js","libraries/bugg-services/Announcement/index.js","libraries/bugg-services/Bug/index.js","libraries/bugg-services/Project/index.js","libraries/bugg-services/Message/index.js","libraries/bugg-services/Notification/index.js","libraries/bugg-services/User/index.js","libraries/bugg.js","pages/sub-pages/ProjectsTabs/Bugs.js","components/CreateAnnouncement.js","pages/sub-pages/ProjectsTabs/Announcements.js","pages/sub-pages/ProjectsTabs/Calendar.js","pages/sub-pages/ProjectsTabs/SettingsComponents/General.js","components/ModifyRole.js","pages/sub-pages/ProjectsTabs/SettingsComponents/Roles.js","pages/sub-pages/ProjectsTabs/SettingsComponents/Notifications.js","pages/sub-pages/ProjectsTabs/SettingsComponents/Members.js","pages/sub-pages/ProjectsTabs/Settings.js","pages/sub-pages/ProjectsTabs/Collaborators.js","pages/sub-pages/SkeletonProject.js","components/CreateProject.js","components/JoinProject.js","components/Home.js","pages/Settings.js","pages/Notifications.js","components/MessageContacts.js","components/MessageContainer.js","components/CreateConversation.js","pages/Messages.js","components/DesktopNavBar.js","components/NavWelcomeHeader.js","components/MobileNavBar.js","pages/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["getErrorMessage","error","response","data","split","status","request","message","logErrorMessage","console","baseUrl","getDefaultHeader","window","localStorage","getItem","staticServerUrl","config","document","io","socketIOClient","require","sailsIOClient","sails","url","rejectUnauthorized","reconnection","socket","on","method","headers","res","jwr","log","initilizeSocket","addEventListener","name","func","removeEventListener","off","reconfigToken","unsubscribeFromMessages","token","Title","Typography","AuthenticationHooks","useState","setName","email","setEmail","password","setPassword","isMobile","useMediaQuery","maxWidth","mode","setMode","loading","setLoading","isAuthed","setIsAuthed","Form","useForm","form","handleSubmit","a","axios","post","notification","success","setItem","toggleMode","loginAsDemo","className","style","margin","padding","display","flexDirection","paddingLeft","paddingRight","paddingTop","minHeight","backgroundImage","backgroundSize","backgroundPosition","to","alignItems","flex","color","fontSize","marginBottom","opacity","justifyContent","borderRadius","labelAlign","labelCol","span","wrapperCol","initialValues","remember","onFinish","onFinishFailed","href","onClick","Item","label","rules","required","type","onChange","e","target","value","Password","offset","htmlType","App","props","renderChart","Promise","ctx","getElementById","getContext","pieChart","Chart","labels","datasets","state","totalBugsOpen","totalBugsClosed","backgroundColor","hoverOffset","setState","updateChart","update","fetchStats","get","project","id","totalBugs","totalMembers","this","prevProps","Fragment","marginRight","gap","title","gutter","width","direction","align","React","Component","Dragger","Upload","Option","Select","withRouter","EditorState","createEmpty","editorState","setEditorState","setTitle","tags","setTags","setValue","dueDate","setDueDate","assignTo","severity","setSeverity","reproducibility","setReproducibility","catagory","setCatagory","FormData","formData","fileRegister","beforeUpload","file","fileList","push","values","description","draftToHtml","convertToRaw","getCurrentContent","requestData","join","undefined","toDate","getTime","assignees","projectId","match","params","length","i","append","getAll","bugId","toggleFunc","_handleListUpdate","members","setMembers","query","setQuery","useEffect","isIn","results","newMembers","users","key","handleChange","layout","errorInfo","autoComplete","wrapperClassName","editorClassName","onEditorStateChange","placeholder","multiple","onRemove","uid","splice","InboxOutlined","marginTop","showSearch","filterOption","onSearch","val","option","map","doc","optionFilterProp","input","children","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","CommentList","comments","dataSource","header","itemLayout","renderItem","submitting","TOKEN","_handleUpdateComments","bug","item","author","owner","avatar","content","overflowX","dangerouslySetInnerHTML","__html","body","datetime","moment","Date","createdAt","fromNow","reverse","level","src","alt","BugStats","editTags","editDueDate","editReproducibility","editSeverity","editCatagory","editStatus","toggleValue","updateStatistic","field","put","valueStyle","formatter","checkedChildren","unCheckedChildren","checked","defaultChecked","toUpperCase","icon","EditOutlined","mom","format","submitter","editAssigned","search","page","pageSize","total","selectedMembers","_handleUpdateAssignees","_handlePagination","_handleUserSearch","_handleSelectUser","_handleAddMembers","size","Search","PlusOutlined","footer","current","showSizeChanger","showQuickJumper","bordered","ind","substring","visible","onOk","onCancel","Paragraph","BugDescription","updateDescription","text","editDescription","createWithContent","ContentState","createFromBlockArray","htmlToDraft","shape","isUploaded","fileId","uploadedFiles","serverId","files","_onFileDelete","delete","_onFileUpload","editFiles","filesToRender","tempFiles","tempFile","File","BugFiles","BugAssignedTo","totalBugCount","_handlePaginationChange","bugs","viewBug","shareBug","deleteBug","actions","onConfirm","marginLeft","preventDefault","pagination","defaultCurrent","Meta","plainTextDescription","updatedAt","throwError","err","Error","object","getAnnouncement","announcementId","announcement","getBug","leaveProject","getConversations","conversations","readAllMessages","conversationId","patch","getUnreadNotifications","limit","skip","totalUnreadNotifcations","UserData","obj","iconId","getMe","user","updateUser","test","String","updatePassword","newPassword","getUserIconUri","uploadUserIcon","bugg","User","Notification","Message","Bug","Announcement","Project","Input","selectedColor","fetchBugs","location","pathname","selectedSort","sortBy","order","openBug","history","selectedBug","toggleDrawer","selectedBugTitle","handleActionUri","URLSearchParams","_handleSortChange","toggleCreatePopup","toggleViewBugPopup","searchQuery","listData","flexWrap","overlay","CalendarOutlined","FontSizeOutlined","FileSyncOutlined","DownOutlined","destroyOnClose","CreateBug","textToCopy","navigator","clipboard","writeText","Clipboard","copy","placement","closable","onClose","ViewBug","textArea","selectText","range","selection","userAgent","createRange","selectNodeContents","getSelection","removeAllRanges","addRange","setSelectionRange","select","createElement","appendChild","createTextArea","execCommand","removeChild","CreateAnnouncement","onFormSubmit","vals","closeModal","updateList","UserOutlined","formatName","nameSegments","shortHandName","handleOpenAnnouncement","has","selectedAnnouncement","fetchAndSetAnnouncements","resetList","announcements","uriProjectId","newAnnouncements","hasMore","handleInfiniteLoad","firstLoad","toggleState","createAnnouncement","borderColor","borderStyle","borderWidth","height","overflowY","overflowClipBox","initialLoad","pageStart","loadMore","useWindow","float","plainTextBody","date","_onDateSelected","_toggleDrawerState","_onDrawerClose","_onBugSelect","getBugsDue","year","day","dayOfYear","bugsDue","compareValue","dateCellRender","createNewEvent","selectedDate","onSelect","initializeComponent","setProject","setDescription","setImageUri","retreiveProject","imageUri","newImageUri","updateProject","newProject","useHistory","deleteProject","updateProjectOnNavigation","settings","reactNode","onPressEnter","o","listType","accept","showUploadList","danger","extra","PERMISSIONS","role","setSelectedMembers","setColor","setSearch","toggleUpdateRoleModal","fetchRoles","handleUserSearch","updateRole","permissions","modAnnouncements","getValue","modBugs","modGen","modMembers","roleId","getInitialValue","includes","initialValue","onChangeComplete","hex","valuePropName","Roles","roles","selectedRole","isModalVisible","updateRoleModalVisible","createRole","handleChangeComplete","deleteRole","react","Notifications","enableNotifications","getCurrentSetting","notificationSetting","recieveNotifications","setCurrentSetting","Members","selectedSetting","str","toLocaleUpperCase","fetchMembers","updateSearch","onChangePagination","toggleAddMember","updateMembersToAdd","selectedMembersToAdd","addMembers","userEmails","searchMembers","isInServer","membersToAdd","removeMember","userId","confirmVisible","deleteButtonLoading","isOwner","okButtonProps","DeleteOutlined","allowClear","getUriAction","action","activeTab","imageUrl","handleClick","getImageSize","backgroundRepeat","overflowedIndicator","position","selectedKeys","DashboardOutlined","BugOutlined","NotificationOutlined","SettingOutlined","TeamOutlined","Overview","Bugs","Announcements","Calendar","updateProjects","Collaborators","CreateProject","fileReader","FileReader","result","readAsDataURL","resetFields","closeFunc","JoinProject","setProjectId","ProjectButton","textAlign","visibleCreate","setVisibleCreate","visibleJoin","setVisibleJoin","projects","bodyStyle","xs","md","xl","Settings","updatePasswordVisible","loadingUpdatePassword","previewImageUri","fetchUser","getWelcomeMessage","updateIcon","iconUri","disabled","notifications","isListening","getAction","joinProject","payload","openNewMessage","close","dismissNotification","notificationId","fetchNotifications","dismissAllNotifications","onRecieveNotitification","notif","totalNotifications","updatePagination","getNotificationActionMessage","MailOutlined","read","MessageContacts","toggleCollapse","toggleHide","sendMessage","selectConversation","activeConversations","headStyle","MinusOutlined","overflow","reciepent","conversation","newMessages","lastMessageText","recipient","avatarLetter","sender","MessageContainer","messages","toggledState","listening","fetchMessages","replace","fetchConversations","newToggleState","elem","anime","targets","easing","duration","onRecieveNewMessage","fetchUnreadNotifications","removeConversation","CloseOutlined","index","isYou","timestamp","CreateConversation","selectedMember","searchUsers","selectUser","toggleHideSimple","disableRefresh","newToggleHide","conversationIds","newConvos","setActiveConversationIds","findIndex","showNew","collapsed","contactsCollapsed","openMessageCollapsed","createConversationIsVisible","setOpenNewMessage","left","bottom","zIndex","MessageOutlined","SubMenu","Menu","DesktopNavBar","toggleCollapsed","willUnmount","logo","panel","button","dashboard","animate","initialCollasped","styles","navigation","Space1","Button1","MenuUnfoldOutlined","MenuFoldOutlined","h2","defaultSelectedKeys","defaultOpenKeys","theme","inlineCollapsed","Item1","DesktopOutlined","CodeOutlined","all","translateX","finished","scale","delay","Dashboard","paddingBottom","boxShadow","top","menu","logout","NavWelcomeHeader","count","unreadNotifications","transform","toggleNotificationDrawer","BellFilled","trigger","userIconUri","MobileNavBar","backdrop","alert","navigateTo","borderBottomWidth","activeConversationIds","handleErrorTest","removeItem","getNotificationCallToAction","open","initialStyles","exact","path","SkeletonProject","Messages","defaults","baseURL","Authentication","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ea200885.chunk.js","sourcesContent":["\r\n\r\n/**\r\n * Retrieves error message from AJAX request\r\n * @param {Error} error \r\n * @returns {String} The error message\r\n */\r\nconst getErrorMessage = (error) => {\r\n    if (error.response) {\r\n        // The request was made and the server responded with a status code\r\n        // that falls out of the range of 2xx\\\r\n        // let message = '';\r\n        // console.log(error.response.data);\r\n        // console.log(error.response.status);\r\n        // console.log(error.response.headers);\r\n\r\n        if ((typeof error.response.data) === 'string') {\r\n            return error.response.data.split('\\n')[0]\r\n        }\r\n\r\n        if (error.response.status === 403) {\r\n            return 'FORBIDDEN'\r\n        } else if (error.response.status === 500) {\r\n            return 'Server Error'\r\n        } else {\r\n            return 'unknown'\r\n        }\r\n\r\n    } else if (error.request) {\r\n        // The request was made but no response was received\r\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n        // http.ClientRequest in node.js\r\n        //console.log(error.request);\r\n        return 'Request Timeout'\r\n    } else {\r\n        // Something happened in setting up the request that triggered an Error\r\n        //console.log('Error', error.message);\r\n        return error.message\r\n    }\r\n    // console.log(error.config);\r\n\r\n}\r\n\r\n/**\r\n * Logs error with console.error\r\n * @param {Error} error \r\n */\r\nconst logErrorMessage = (error) => {\r\n    console.error('Error: ' + getErrorMessage(error))\r\n}\r\n\r\nlet obj = {\r\n    getErrorMessage,\r\n    logErrorMessage\r\n}\r\n\r\nexport {\r\n    getErrorMessage,\r\n    logErrorMessage\r\n};\r\n\r\nexport default obj;\r\n\r\n","\r\nconst isDev = false;\r\n\r\nlet baseUrl = isDev ? 'http://192.168.0.167:1337' : 'https://bugg.imranbey.com'\r\nconst getDefaultHeader = () => ({\r\n    'x-auth-token': window.localStorage.getItem('token')\r\n});\r\nconst staticServerUrl = isDev ? 'http://192.168.0.167:3000' : 'https://bugg.imranbey.com'\r\n\r\nlet config = {\r\n    baseUrl,\r\n    getDefaultHeader,\r\n    staticServerUrl\r\n}\r\n\r\n\r\nexport { baseUrl, getDefaultHeader, staticServerUrl }\r\nexport default config;","/**\r\n * Setup single sails socket instance\r\n */\r\nimport { baseUrl, getDefaultHeader } from '../pages/config'\r\n// import { Socket } from 'socket.io-client';\r\n// import SailsIOJS from 'sails.io.js';\r\n\r\nfunction initilizeSocket() {\r\n    if (document.io) return;\r\n    var socketIOClient = require('socket.io-client');\r\n    var sailsIOClient = require('sails.io.js');\r\n\r\n    // Instantiate the socket client (`io`)\r\n    // (for now, you must explicitly pass in the socket.io client when using this library from Node.js)\r\n    var io = sailsIOClient(socketIOClient);\r\n    document.io = io;\r\n    // io.sails.autoConnect = false;\r\n    io.sails.url = baseUrl;\r\n    io.sails.rejectUnauthorized = false;\r\n    io.sails.reconnection = true;\r\n    // io.sails.headers = {\r\n    //     'x-auth-token': window.localStorage.getItem('token')\r\n    // };\r\n\r\n    io.socket.on('connect', () => {\r\n        // io.socket.post('/message/subscribe', {}, );\r\n\r\n        io.socket.request({\r\n            method: 'POST',\r\n            url: '/message/subscribe',\r\n            headers: getDefaultHeader(),\r\n\r\n        }, (res, jwr) => {\r\n            console.log(res)\r\n            console.log(jwr)\r\n            console.log('Possibly Joined room')\r\n        });\r\n\r\n    });\r\n\r\n\r\n}\r\ninitilizeSocket()\r\n\r\nconst addEventListener = (name, func) => {\r\n    console.log('listening on ' + name)\r\n    // func()\r\n    document.io.socket.on(name, func)\r\n}\r\n\r\nconst removeEventListener = (name, func) => {\r\n    console.log('remove listeners on ' + name)\r\n    document.io.socket.off(name, func)\r\n}\r\n\r\nconst reconfigToken = () => {\r\n    let { io } = document;\r\n    // if (!io.socket.isConnected()) return\r\n\r\n    io.socket.request({\r\n        method: 'POST',\r\n        url: '/message/subscribe',\r\n        headers: getDefaultHeader(),\r\n\r\n    }, (res, jwr) => {\r\n        console.log(res)\r\n        console.log(jwr)\r\n\r\n        console.log('Possibly Joined room')\r\n    });\r\n}\r\n/**\r\n * Removes user from messages, requires current token\r\n * @param {string} token\r\n */\r\nconst unsubscribeFromMessages = (token) => {\r\n    const { io } = document;\r\n    io.socket.request({\r\n        method: 'POST',\r\n        url: '/message/unsubscribe',\r\n        headers: {\r\n            'x-auth-token': token\r\n        },\r\n\r\n    }, (res, jwr) => {\r\n        console.log(res)\r\n        console.log(jwr)\r\n\r\n        console.log('Possibly Joined room')\r\n    });\r\n}\r\n\r\n\r\nconst disconnectSocket = () => {\r\n    const { io } = document;\r\n    if (!io.socket.isConnected()) return;\r\n    io.socket.disconnect();\r\n}\r\n\r\nconst connectSocket = () => {\r\n    const { io } = document;\r\n    if (io.socket.isConnected() || io.socket.isConnecting()) return;\r\n    io.sails.headers = {\r\n        'x-auth-token': window.localStorage.getItem('token')\r\n    };\r\n    io.socket.reconnect();\r\n}\r\n\r\nlet obj = {\r\n    addEventListener,\r\n    removeEventListener,\r\n    reconfigToken,\r\n    disconnectSocket,\r\n    connectSocket,\r\n    unsubscribeFromMessages\r\n}\r\n\r\nexport { addEventListener, reconfigToken, removeEventListener, unsubscribeFromMessages };\r\nexport default obj;\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Redirect,\r\n    // Link\r\n} from \"react-router-dom\";\r\nimport { Card } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport { Form, Input, Button, notification, Space } from 'antd';\r\nimport axios from 'axios';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\nimport { reconfigToken } from '../libraries/socket';\r\nimport { baseUrl } from './config';\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\n\r\nconst AuthenticationHooks = () => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const isMobile = useMediaQuery({ maxWidth: 800 })\r\n    const [mode, setMode] = useState('login');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isAuthed, setIsAuthed] = useState(false);\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        setLoading(true)\r\n        var res;\r\n        console.log(password)\r\n        // attempt to get token\r\n        try {\r\n            if (mode === 'login') {\r\n                console.log(password)\r\n                res = await axios.post(baseUrl + '/user/login', {\r\n                    email,\r\n                    password\r\n                })\r\n            } else {\r\n                res = await axios.post(baseUrl + '/user/signup',\r\n                    {\r\n                        name,\r\n                        email,\r\n                        password,\r\n                    })\r\n            }\r\n        } catch (e) {\r\n            let message = getErrorMessage(e)\r\n            console.error(\"Error: \" + message);\r\n            notification.error({\r\n                message: `Could not ${mode}: ` + getErrorMessage(e)\r\n            })\r\n        }\r\n\r\n\r\n        setLoading(false)\r\n        if (res) {\r\n            // store token :)\r\n            // alert(res.data.message)\r\n            notification.success({\r\n                message: res.data.message\r\n            })\r\n\r\n            window.localStorage.setItem('token', res.data.token);\r\n            reconfigToken()\r\n            setIsAuthed(true)\r\n        }\r\n\r\n    }\r\n    const onFinishedFailed = () => false;\r\n    const toggleMode = () => {\r\n        if (mode === 'login') {\r\n            setMode('signup')\r\n        } else {\r\n            setMode('login')\r\n        }\r\n    }\r\n\r\n    const loginAsDemo = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const { data: { token } } = await axios.post('/user/demo');\r\n\r\n            notification.success({\r\n                message: 'Logged in as demo'\r\n            })\r\n\r\n            window.localStorage.setItem('token', token);\r\n            reconfigToken()\r\n            setLoading(false)\r\n            setIsAuthed(true)\r\n        } catch (e) {\r\n            setLoading(false)\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\" style={{\r\n            //backgroundColor: 'cyan',\r\n            margin: 0,\r\n            padding: 0,\r\n            display: 'flex',\r\n            flexDirection: isMobile ? 'column' : 'row',\r\n            paddingLeft: isMobile ? 10 : 64,\r\n            paddingRight: isMobile ? 10 : 64,\r\n            paddingTop: 64,\r\n            // alignItems: 'center'\r\n            //position: 'absolute',\r\n            //top: 0,\r\n            //left: 0,\r\n            minHeight: '100vh',\r\n            // width: '100%',\r\n            backgroundImage: \"url('https://images.unsplash.com/photo-1617653695386-1d78957d33f8?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80')\",\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center'\r\n        }}>\r\n            {isAuthed ? <Redirect to=\"/dashboard\" /> : null}\r\n            <div\r\n\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignItems: isMobile ? 'center' : 'flex-start',\r\n                    flex: isMobile ? 'unset' : 1\r\n                }}>\r\n                <h1 style={{\r\n\r\n                    color: 'white',\r\n\r\n                    fontSize: 48,\r\n                    margin: 0,\r\n\r\n                }}>\r\n                    Bugg\r\n                </h1>\r\n                <p style={{ color: 'white', marginBottom: 30, opacity: .9 }}>A simple bug tracker\r\n                </p>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    flex: isMobile ? 'unset' : 1,\r\n                    display: isMobile ? 'flex' : 'unset',\r\n                    flexDirection: isMobile ? 'row' : 'unset',\r\n                    justifyContent: isMobile ? 'center' : 'unset'\r\n                }}\r\n            >\r\n                <Card style={{\r\n                    maxWidth: isMobile ? 450 : 'unset',\r\n                    marginBottom: 30,\r\n                    borderRadius: 5,\r\n                    flex: 1\r\n                }}>\r\n\r\n                    <Form\r\n                        name=\"basic\"\r\n                        labelAlign=\"left\"\r\n                        labelCol={{\r\n                            //span: 8,\r\n                            span: 8,\r\n                        }}\r\n                        wrapperCol={{\r\n                            //span: 16,\r\n                            span: 16\r\n                        }}\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        form={form}\r\n                        onFinish={handleSubmit}\r\n                        onFinishFailed={onFinishedFailed}\r\n                    >\r\n                        <Typography>\r\n                            {\r\n                                mode === 'login' ?\r\n                                    <Title>Login</Title> : <Title>Signup</Title>\r\n                            }\r\n\r\n                        </Typography>\r\n                        <h4 style={{\r\n                            marginBottom: 30\r\n                        }}>\r\n                            {mode === 'login' ?\r\n                                <>\r\n                                    Don't have an account? <a href='#' onClick={toggleMode}>Sign up</a>\r\n                                </> :\r\n                                <>\r\n                                    Already have an account? <a href='#' onClick={toggleMode}>Login</a>\r\n                                </>\r\n                            }\r\n\r\n                        </h4>\r\n                        {\r\n                            mode === 'signup' ?\r\n                                <>\r\n                                    <Form.Item\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        style={{\r\n\r\n                                        }}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please input your name!',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input\r\n                                            type=\"text\" onChange={(e) => setName(e.target.value)}\r\n                                        />\r\n                                    </Form.Item>\r\n\r\n                                </>\r\n                                :\r\n                                null\r\n                        }\r\n                        <Form.Item name='email' label=\"Email\" rules={[{\r\n                            required: true,\r\n                            type: 'email'\r\n                        }]}>\r\n                            <Input\r\n\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input your password!',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input.Password\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        {\r\n                            mode === 'signup' ?\r\n                                <Form.Item\r\n                                    label=\"Confirm Passord\"\r\n                                    name=\"confirm-password\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your password!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input.Password\r\n                                    // onChange={(e) => setConfirmPassword(e.target.value)}\r\n\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                                :\r\n                                null\r\n                        }\r\n                        <Form.Item\r\n                            wrapperCol={{\r\n                                offset: 0,\r\n                                span: 16,\r\n                            }}\r\n                        >\r\n                            <Space>\r\n                                <Button\r\n                                    loading={loading}\r\n                                    type=\"primary\" htmlType=\"submit\">\r\n                                    SUBMIT\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={loginAsDemo}\r\n                                >\r\n                                    Use Demo Account Instead\r\n                                </Button>\r\n                            </Space>\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthenticationHooks;\r\n\r\n","import React from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport { Card, Statistic, Row, Col, Space } from 'antd';\r\nimport axios from 'axios';\r\nimport MediaQuery from 'react-responsive'\r\nimport { logErrorMessage } from '../../../libraries/network-error-handling';\r\nimport { getDefaultHeader } from '../../config';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthed: false,\r\n            totalBugs: 0,\r\n            totalBugsClosed: 0,\r\n            totalBugsOpen: 0,\r\n            totalMembers: 0,\r\n            pieChart: null\r\n        };\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        await this.renderChart();\r\n        this.fetchStats()\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.fetchStats()\r\n        }\r\n    }\r\n\r\n    renderChart = () => {\r\n        return new Promise((res) => {\r\n            var ctx = document.getElementById('pieChart').getContext('2d');\r\n            var pieChart = new Chart(ctx, {\r\n                type: 'pie',\r\n                data: {\r\n                    labels: [\r\n                        'Open',\r\n                        'Closed',\r\n\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'My First Dataset',\r\n                        data: [this.state.totalBugsOpen, this.state.totalBugsClosed],\r\n                        backgroundColor: [\r\n                            '#f50',\r\n                            '#389e0d',\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                }\r\n            })\r\n\r\n            this.setState({\r\n                pieChart\r\n            }, res)\r\n        })\r\n    }\r\n\r\n    updateChart = async () => {\r\n        let { pieChart } = this.state;\r\n        pieChart.data.datasets[0].data = [this.state.totalBugsOpen, this.state.totalBugsClosed];\r\n        pieChart.update()\r\n    }\r\n\r\n    fetchStats = async () => {\r\n        try {\r\n            let { data } = await axios.get('/project/stats/' + this.props.project.id, {\r\n                headers: getDefaultHeader(),\r\n            });\r\n\r\n            let {\r\n                totalBugs,\r\n                totalBugsClosed,\r\n                totalBugsOpen,\r\n                totalMembers } = data;\r\n\r\n            this.setState({\r\n                totalBugs,\r\n                totalBugsClosed,\r\n                totalBugsOpen,\r\n                totalMembers\r\n            }, this.updateChart)\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <React.Fragment>\r\n\r\n                        <div\r\n                            style={{\r\n                                display: isMobile ? 'flex' : 'inline-flex',\r\n                                flexDirection: isMobile ? 'column' : 'unset',\r\n                                marginRight: isMobile ? 10 : 64,\r\n                                gap: 10\r\n                            }}\r\n                        >\r\n\r\n                            <Card\r\n                                title=\"Statistics\"\r\n                            >\r\n                                <Row gutter={16}>\r\n                                    <Col span={12}>\r\n                                        <Statistic title=\"Members\" value={this.state.totalMembers} />\r\n                                    </Col>\r\n                                    <Col span={12}>\r\n                                        <Statistic title=\"Bugs Submited\" value={this.state.totalBugs} />\r\n\r\n                                    </Col>\r\n                                    <Col span={12}>\r\n                                        <Statistic title=\"Bugs Open\" value={this.state.totalBugsOpen} />\r\n                                    </Col>\r\n                                    <Col span={12}>\r\n                                        <Statistic title=\"Bugs Closed\" value={this.state.totalBugsClosed} />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card>\r\n\r\n\r\n                            <Card\r\n                                title=\"Progress\"\r\n                                style={{\r\n                                    //width: 450\r\n                                }}>\r\n                                <Space\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        // display: 'none'\r\n                                    }}\r\n                                    direction='vertical' align='center'>\r\n\r\n                                    <canvas\r\n                                        id=\"pieChart\"\r\n                                    //width=\"400\"\r\n                                    //height=\"400\"\r\n                                    ></canvas>\r\n\r\n                                </Space>\r\n\r\n                            </Card>\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </React.Fragment>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport './../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { Form, Input, Button, Space, DatePicker, notification } from 'antd';\r\n\r\nimport { Select } from 'antd';\r\nimport { Upload } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Dragger } = Upload;\r\nconst { Option } = Select;\r\n\r\n\r\n\r\n\r\n\r\nconst App = (props) => {\r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n    const [title, setTitle] = useState('');\r\n    const [tags, setTags] = useState([]);\r\n    const [value, setValue] = useState([]);\r\n\r\n    const [dueDate, setDueDate] = useState(0);\r\n    const [assignTo] = useState([]);\r\n    const [severity, setSeverity] = useState('');\r\n    const [reproducibility, setReproducibility] = useState('');\r\n    const [catagory, setCatagory] = useState('');\r\n    const [formData] = useState(new FormData());\r\n    const [fileRegister] = useState([]);\r\n\r\n\r\n    const beforeUpload = async (file, fileList) => {\r\n        fileRegister.push(file)\r\n        return false\r\n    };\r\n    const onRemove = (file) => {\r\n        for (let i = 0; i < fileRegister.length; i++) {\r\n            if (fileRegister[i].uid === file.uid) {\r\n                fileRegister.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async function onFinish(values) {\r\n        let description = draftToHtml(convertToRaw(editorState.getCurrentContent()));\r\n\r\n        try {\r\n            // console.log(props.location.pathname.split('/')[3])\r\n            let requestData = {\r\n                description,\r\n                title,\r\n                tags: tags.join(','),\r\n                dueDate: (dueDate === 0 ? undefined : dueDate.toDate().getTime()),\r\n                assignTo: assignTo.join(','),\r\n                severity,\r\n                reproducibility,\r\n                catagory,\r\n                assignees: value.join(','),\r\n                projectId: props.match.params.projectId\r\n            }\r\n            // console.log(requestData)\r\n            let res = await axios.post('/bug/create', requestData, {\r\n                headers: getDefaultHeader()\r\n            })\r\n\r\n            const { data } = res;\r\n            console.log(data)\r\n            // TODO: add file upload\r\n\r\n            if (fileRegister.length !== 0) {\r\n\r\n                for (let i = 0; i < fileRegister.length; i++) {\r\n                    formData.append(`files`, fileRegister[i])\r\n                }\r\n                console.log(formData.getAll('files'))\r\n                await axios.post('/file/', formData, {\r\n                    headers: {\r\n                        ...(getDefaultHeader()),\r\n                        'Content-Type': 'multipart/form-data'\r\n                    },\r\n                    params: {\r\n                        bugId: data.id\r\n                    }\r\n                })\r\n            }\r\n            props.toggleFunc()\r\n            props._handleListUpdate();\r\n            notification.success({\r\n                message: 'Bug was submitted!'\r\n            })\r\n\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    const handleChange = (val, option) => {\r\n        //console.log(value)\r\n        setValue(val)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        notification.error({\r\n            message: 'Please input title'\r\n        })\r\n    };\r\n\r\n    // const [name, setName] = useState('imran')\r\n    const [members, setMembers] = useState([]);\r\n    const [query, setQuery] = useState();\r\n\r\n    useEffect(() => {\r\n        const handleChange = async () => {\r\n            let results;\r\n            //setLoading(true);\r\n\r\n            try {\r\n                results = await axios.get('/user/search', {\r\n                    params: {\r\n                        query: query,\r\n                        projectId: props.match.params.projectId,\r\n                        isIn: true\r\n                    },\r\n                    headers: getDefaultHeader()\r\n                })\r\n            } catch (e) {\r\n                console.error(getErrorMessage(e))\r\n                // setLoading(false);\r\n                return\r\n            }\r\n\r\n            //console.log(results.data)\r\n            let newMembers = [];\r\n            let users = results.data.results;\r\n            for (let i = 0; i < users.length; i++) {\r\n                newMembers.push({\r\n                    key: users[i].id,\r\n                    name: users[i].name,\r\n                    email: users[i].email,\r\n                    id: users[i].id\r\n                })\r\n            }\r\n\r\n            setMembers(newMembers);\r\n            //setLoading(false);\r\n            // console.log('Updated: ')\r\n            //console.log(newMembers);\r\n        }\r\n\r\n        handleChange()\r\n    }, [query]);\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n\r\n\r\n        }}>\r\n            <Form\r\n                name=\"basic\"\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 24,\r\n                }}\r\n                initialValues={{\r\n                    remember: false,\r\n                }}\r\n                layout='vertical'\r\n                // preserve={f}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            remember: false\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        type=\"text\"\r\n                        // value={'this.state.title'}\r\n                        autoComplete='off'\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <style>\r\n                    {`\r\n                    .demo-editor {\r\n                        padding: 0px 10px 0px 10px;\r\n                        border-color: rgba(0,0,0,.1);\r\n                        border-style: solid;\r\n                        border-width: 1px;\r\n                        min-height: 150px\r\n                    }\r\n                    `}\r\n                </style>\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Editor\r\n                        editorState={editorState}\r\n                        wrapperClassName=\"demo-wrapper\"\r\n                        editorClassName=\"demo-editor\"\r\n                        onEditorStateChange={setEditorState}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Tags\"\r\n                    name=\"tags\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select\r\n\r\n                        mode=\"tags\"\r\n                        style={{ width: '100%' }}\r\n                        placeholder=\"Tags Mode\"\r\n                        onChange={(e) => setTags(e)}\r\n                    // onChange={handleChange}\r\n                    >\r\n\r\n                    </Select>,\r\n                </Form.Item>\r\n\r\n                <Dragger\r\n                    style={{\r\n                        marginBottom: 20\r\n                    }}\r\n                    //{...props}\r\n                    multiple\r\n                    beforeUpload={beforeUpload}\r\n                    onRemove={onRemove}\r\n                >\r\n\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                        <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                        Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                        band files\r\n                    </p>\r\n                </Dragger>\r\n                <Form.Item\r\n                    label=\"Due Date\"\r\n                    name=\"due-date\"\r\n                    style={{\r\n                        marginTop: 20\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <DatePicker\r\n                        style={{\r\n                            width: '100%'\r\n                        }}\r\n                        // onChange={() => alert('val')}\r\n                        onChange={setDueDate}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Assign To...\"\r\n                    name=\"assignees\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select\r\n                        showSearch\r\n                        mode='multiple'\r\n                        // value={this.state.value}\r\n                        placeholder={\"search...\"}\r\n                        // style={this.props.style}\r\n                        // defaultActiveFirstOption={false}\r\n                        // showArrow={false}\r\n                        filterOption={false}\r\n                        onSearch={setQuery}\r\n                        onChange={handleChange}\r\n                    // notFoundContent={\"\"}\r\n                    >\r\n                        {/* <Option key={'1'}>{query}</Option> */}\r\n                        {\r\n                            members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Severity\"\r\n                    name=\"severity\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select\r\n                        showSearch\r\n                        //style={{ width: 200 }}\r\n                        placeholder=\"Search to Select\"\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={setSeverity}\r\n                    >\r\n                        <Option value=\"None\">None</Option>\r\n                        <Option value=\"Critical\">Critical</Option>\r\n                        <Option value=\"Major\">Major</Option>\r\n                        <Option value=\"Minor\">Minor</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Reproducibility\"\r\n                    name=\"reproducibility\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select\r\n                        onChange={setReproducibility}\r\n                        showSearch\r\n                        // style={{ width: 200 }}\r\n                        placeholder=\"Search to Select\"\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        <Option value=\"Always\">Always</Option>\r\n                        <Option value=\"Sometimes\">Sometimes</Option>\r\n                        <Option value=\"Rarely\">Rarely</Option>\r\n                        <Option value=\"Unable\">Unable</Option>\r\n                        <Option value=\"Never tried\">Never tried</Option>\r\n                        <Option value=\"N/A\">N/A</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Catagory\"\r\n                    name=\"catagory\"\r\n                    rules={[\r\n                        {\r\n                            required: false,\r\n                            // message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select\r\n                        showSearch\r\n                        onChange={setCatagory}\r\n                        //style={{ width: 200 }}\r\n                        placeholder=\"Search to Select\"\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        <Option value=\"Security\">Security</Option>\r\n                        <Option value=\"Data Loss\">Data Loss</Option>\r\n                        <Option value=\"Performance\">Performance</Option>\r\n                        <Option value=\"Crash/Hang\">Crash/Hang</Option>\r\n                        <Option value=\"Other Bug\">Other Bug</Option>\r\n                        <Option value=\"UI\">UI</Option>\r\n                        <Option value=\"New Feature\">New Feature</Option>\r\n                        <Option value=\"Enhancement\">Enhancement</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Space\r\n                    style={{\r\n                        width: '100%',\r\n                        display: 'inline-flex',\r\n                        justifyContent: 'flex-end'\r\n                    }}\r\n\r\n                >\r\n                    <Button\r\n                        onClick={props.toggleFunc}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        htmlType='submit'\r\n\r\n                        type='primary'>\r\n                        Submit\r\n                    </Button>\r\n                </Space>\r\n\r\n            </Form>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\nimport {\r\n    Comment,\r\n    Space, Divider,\r\n    Avatar, Button, List, Typography, message\r\n} from 'antd';\r\nimport moment from 'moment';\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport { Editor as DraftEditor } from 'react-draft-wysiwyg';\r\nimport './../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport axios from 'axios';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\nconst CommentList = ({ comments }) => (\r\n    <List\r\n        dataSource={comments}\r\n        header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\r\n        itemLayout=\"horizontal\"\r\n        renderItem={props => <Comment  {...props} />}\r\n    />\r\n);\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        comments: [],\r\n        submitting: false,\r\n        value: '',\r\n        editorState: EditorState.createEmpty(),\r\n    };\r\n\r\n    TOKEN = window.localStorage.getItem('token');\r\n\r\n    componentDidMount() {\r\n        this._handleUpdateComments()\r\n    }\r\n\r\n    _handleUpdateComments = async () => {\r\n        try {\r\n            let { data } = await axios.get('/comment', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    bugId: this.props.bug.id\r\n                }\r\n            });\r\n\r\n            let comments = data.comments.map((item) => ({\r\n                author: item.owner.name,\r\n                key: item.id,\r\n                avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n                content: <div\r\n                    style={{\r\n                        width: 700,\r\n                        minHeight: 50,\r\n                        overflowX: 'auto'\r\n                    }}\r\n                    dangerouslySetInnerHTML={{ __html: item.body }} />,\r\n                datetime: moment(new Date(item.createdAt)).fromNow(),\r\n\r\n            })\r\n            )\r\n            this.setState({\r\n                comments: [...this.state.comments, ...comments].reverse()\r\n            })\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        if (!this.state.value) return\r\n\r\n        this.setState({ submitting: true });\r\n\r\n        try {\r\n            await axios.post('/comment/', {\r\n                bugId: this.props.bug.id,\r\n                body: this.state.value\r\n            }, {\r\n                headers: getDefaultHeader(),\r\n            })\r\n        } catch (e) {\r\n            if (e.response) {\r\n                console.log(e.response)\r\n            } else {\r\n                console.log(e)\r\n            }\r\n            message.error('Could not send message: ' + getErrorMessage(e))\r\n            return this.setState({ submitting: false })\r\n        }\r\n\r\n\r\n\r\n        this.setState({\r\n            submitting: false,\r\n            value: '',\r\n            comments: [\r\n\r\n                {\r\n                    author: 'Han Solo',\r\n                    avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n                    content: <div\r\n                        style={{\r\n                            width: 700,\r\n                            minHeight: 50,\r\n                            overflowX: 'auto'\r\n                        }}\r\n                        dangerouslySetInnerHTML={{ __html: this.state.value }} />,\r\n                    datetime: moment().fromNow(),\r\n                },\r\n                ...this.state.comments,\r\n            ],\r\n        });\r\n\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            value: e.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { comments, submitting } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <br />\r\n\r\n                <Space align='center'>\r\n                    <Title\r\n                        style={{\r\n                            margin: 0,\r\n                            marginRight: 10\r\n                        }}\r\n                        level={5}>Discussion</Title>\r\n\r\n\r\n                </Space>\r\n\r\n                <Divider />\r\n                <Comment\r\n                    avatar={\r\n                        <Avatar\r\n                            src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n                            alt=\"Han Solo\"\r\n                        />\r\n                    }\r\n                    content={\r\n                        // <Editor\r\n                        //     onChange={this.handleChange}\r\n                        //     onSubmit={this.handleSubmit}\r\n                        //     submitting={submitting}\r\n                        //     value={value}\r\n                        // />\r\n                        <React.Fragment>\r\n                            <style>\r\n                                {`\r\n                    .demo-editor {\r\n                        padding: 0px 10px 0px 10px;\r\n                        border-color: rgba(0,0,0,.1);\r\n                        border-style: solid;\r\n                        border-width: 1px;\r\n                        min-height: 120px;\r\n                        margin-bottom: 20px;\r\n                    }\r\n                    `}\r\n                            </style>\r\n                            <DraftEditor\r\n                                editorState={this.state.editorState}\r\n                                wrapperClassName=\"demo-wrapper\"\r\n                                editorClassName=\"demo-editor\"\r\n                                onEditorStateChange={(editorState) => {\r\n                                    this.setState({\r\n                                        value: draftToHtml(convertToRaw(editorState.getCurrentContent())),\r\n                                        editorState\r\n                                    })\r\n                                }}\r\n                            />\r\n                            <Button htmlType=\"submit\" loading={submitting} onClick={this.handleSubmit} type=\"primary\">\r\n                                Add Comment\r\n                            </Button>\r\n                        </React.Fragment>\r\n\r\n                    }\r\n                />\r\n                {comments.length > 0 && <CommentList comments={comments} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\n// import moment from 'moment';\r\nimport {\r\n    Statistic,\r\n    Row,\r\n    Col,\r\n    Tag,\r\n    Button,\r\n\r\n    Switch,\r\n    DatePicker,\r\n    Select,\r\n    message,\r\n} from 'antd';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport MediaQuery from 'react-responsive';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nclass BugStats extends React.Component {\r\n    state = {\r\n        editTags: false,\r\n        editDueDate: false,\r\n        editReproducibility: false,\r\n        editSeverity: false,\r\n        editCatagory: false,\r\n        editStatus: false,\r\n        values: { tags: [' '], dueDate: null }\r\n    };\r\n\r\n    toggleValue = (val) => this.setState({ [val]: !this.state[val] })\r\n\r\n    updateStatistic = async (field, value) => {\r\n\r\n        try {\r\n            await axios.put('/bug/' + this.props.bugId, {\r\n                [field]: value\r\n            }, {\r\n                headers: getDefaultHeader(),\r\n\r\n            })\r\n            message.success(`\"${field}\" was updated to \"${value}\"`)\r\n        } catch (e) {\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { bug } = this.props;\r\n\r\n        this.setState({\r\n            values: {\r\n                status: bug.status,\r\n                tags: (bug.tags !== '' ? bug.tags.split(',') : []),\r\n                dueDate: (bug.dueDate ? moment(new Date(bug.dueDate)) : null),\r\n                catagory: (bug.catagory ? bug.catagory : undefined),\r\n                severity: (bug.severity ? bug.severity : undefined),\r\n                reproducibility: (bug.reproducibility ? bug.reproducibility : undefined),\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    _forceUpdateBug() {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <>\r\n                        <Row //gutter={16}\r\n                            gutter={[0, 40]}\r\n                        >\r\n                            <Col span={isMobile ? 12 : 8}>\r\n\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editStatus) {\r\n                                            return (<Switch\r\n                                                checkedChildren=\"OPEN\"\r\n                                                unCheckedChildren=\"CLOSED\"\r\n\r\n                                                onChange={(checked) => {\r\n                                                    if (checked) {\r\n                                                        //open\r\n                                                        this.setState({\r\n                                                            values: { ...this.state.values, status: 'open' }\r\n                                                        })\r\n                                                    } else {\r\n                                                        //closed\r\n                                                        this.setState({\r\n                                                            values: { ...this.state.values, status: 'closed' }\r\n                                                        })\r\n                                                    }\r\n                                                }}\r\n                                                defaultChecked={(this.state.values.status === 'open' ? true : false)} />\r\n                                            )\r\n                                        } else {\r\n                                            return <Tag color={(this.state.values.status === 'open' ? \"#f50\" : \"#389e0d\")} //\"#f50\"\r\n                                            >{\r\n                                                    ('' + this.state.values.status).toUpperCase()\r\n                                                }</Tag>\r\n                                        }\r\n                                    }}\r\n                                    title={<>\r\n                                        Status\r\n                                        <Button\r\n                                            onClick={() => {\r\n                                                if (this.state.editStatus) {\r\n                                                    this.updateStatistic('status', this.state.values.status)\r\n                                                }\r\n                                                this.toggleValue('editStatus')\r\n                                            }}\r\n                                            type=\"text\"\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n\r\n                                    }\r\n\r\n                                    value={'OPEN'} />\r\n                            </Col>\r\n                            <Col span={isMobile ? 12 : 8}>\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n\r\n                                    title={<>\r\n                                        Tags\r\n                                        <Button\r\n                                            onClick={() => {\r\n                                                if (this.state.editTags) {\r\n                                                    this.updateStatistic('tags', this.state.values.tags.join())\r\n                                                }\r\n                                                this.toggleValue('editTags')\r\n                                            }}\r\n                                            type=\"text\"\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n\r\n                                    }\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editTags) {\r\n                                            return (<Select mode=\"tags\"\r\n                                                onChange={\r\n                                                    (e) => {\r\n                                                        this.setState({\r\n                                                            values: { ...this.state.values, tags: e }\r\n                                                        })\r\n                                                    }\r\n                                                }\r\n\r\n                                                value={this.state.values.tags}\r\n                                                style={{ width: 200 }} placeholder=\"Tags Mode\">\r\n                                                <Option key={\"Poggers\"}>Poggers</Option>)\r\n                                            </Select>)\r\n                                        } else {\r\n\r\n                                            return this.state.values.tags.map((item) => {\r\n                                                return <Tag color=\"cyan\">{item}</Tag>\r\n                                            })\r\n\r\n                                        }\r\n                                    }}\r\n                                    value={\"URGENT\"} />\r\n\r\n                            </Col>\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n                                    title={<>\r\n                                        Due Date\r\n                                        <Button\r\n                                            onClick={() => {\r\n                                                if (this.state.editDueDate && this.state.values.dueDate) {\r\n\r\n                                                    this.updateStatistic('dueDate', this.state.values.dueDate.toDate().getTime())\r\n                                                }\r\n                                                this.toggleValue('editDueDate')\r\n                                            }}\r\n                                            type=\"text\"\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n\r\n                                    }\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editDueDate) {\r\n                                            return (<DatePicker\r\n                                                style={{\r\n                                                    // width: 200\r\n                                                }}\r\n                                                value={this.state.values.dueDate}\r\n                                                onChange={(mom) => {\r\n                                                    this.setState({\r\n                                                        values: {\r\n                                                            ...this.state.values,\r\n                                                            dueDate: mom\r\n                                                        }\r\n                                                    })\r\n                                                }} />)\r\n                                        } else {\r\n                                            if (this.state.values.dueDate) {\r\n                                                return this.state.values.dueDate.format('MMM Do YY')\r\n                                            }\r\n                                            return \"N/A\"\r\n                                        }\r\n                                    }}\r\n                                    value={\"Oct 24, 2022\"} />\r\n                            </Col>\r\n\r\n\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n\r\n                                    title={<>\r\n                                        Reproducibility\r\n                                        <Button type=\"text\"\r\n\r\n                                            onClick={() => {\r\n                                                if (this.state.editReproducibility) {\r\n                                                    this.updateStatistic('reproducibility', this.state.values.reproducibility)\r\n                                                }\r\n                                                this.toggleValue('editReproducibility')\r\n                                            }}\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n\r\n                                    }\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editReproducibility) {\r\n                                            return (<Select\r\n                                                showSearch\r\n                                                onChange={(e) => {\r\n                                                    this.setState({\r\n                                                        values: {\r\n                                                            ...this.state.values,\r\n                                                            reproducibility: e\r\n                                                        }\r\n                                                    })\r\n                                                }}\r\n                                                value={this.state.values.reproducibility}\r\n                                                style={{\r\n                                                    //    width: 200 \r\n                                                }}\r\n                                                placeholder=\"Search to Select\"\r\n                                                optionFilterProp=\"children\"\r\n                                                filterOption={(input, option) =>\r\n                                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                }\r\n                                                filterSort={(optionA, optionB) =>\r\n                                                    optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                                                }\r\n                                            >\r\n                                                <Option value=\"Always\">Always</Option>\r\n                                                <Option value=\"Sometimes\">Sometimes</Option>\r\n                                                <Option value=\"Rarely\">Rarely</Option>\r\n                                                <Option value=\"Unable\">Unable</Option>\r\n                                                <Option value=\"Never tried\">Never tried</Option>\r\n                                                <Option value=\"N/A\">N/A</Option>\r\n                                            </Select>)\r\n                                        } else {\r\n                                            return this.state.values.reproducibility\r\n                                        }\r\n                                    }}\r\n                                    value={'Always'} />\r\n\r\n                            </Col>\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n\r\n                                    title={<>\r\n                                        Severity\r\n                                        <Button type=\"text\"\r\n                                            onClick={() => {\r\n                                                if (this.state.editSeverity) {\r\n                                                    this.updateStatistic('severity', this.state.values.severity)\r\n                                                }\r\n                                                this.toggleValue('editSeverity')\r\n                                            }}\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n\r\n                                    }\r\n\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editSeverity) {\r\n                                            return (\r\n                                                <Select\r\n                                                    showSearch\r\n                                                    style={{\r\n                                                        // width: 200\r\n                                                    }}\r\n                                                    placeholder=\"Search to Select\"\r\n                                                    optionFilterProp=\"children\"\r\n                                                    value={this.state.values.severity}\r\n                                                    onChange={(e) => {\r\n                                                        this.setState({\r\n                                                            values: {\r\n                                                                ...this.state.values,\r\n                                                                severity: e\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    filterOption={(input, option) =>\r\n                                                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                    }\r\n                                                    filterSort={(optionA, optionB) =>\r\n                                                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                                                    }\r\n                                                >\r\n                                                    <Option value=\"None\">None</Option>\r\n                                                    <Option value=\"Critical\">Critical</Option>\r\n                                                    <Option value=\"Major\">Major</Option>\r\n                                                    <Option value=\"Minor\">Minor</Option>\r\n                                                </Select>)\r\n                                        } else {\r\n                                            return this.state.values.severity\r\n                                        }\r\n                                    }}\r\n                                    value={'Major'} />\r\n\r\n                            </Col>\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n\r\n                                    title={<>\r\n                                        Catagory\r\n                                        <Button type=\"text\"\r\n                                            onClick={() => {\r\n                                                if (this.state.editCatagory) {\r\n                                                    this.updateStatistic('catagory', this.state.values.catagory)\r\n                                                }\r\n                                                this.toggleValue('editCatagory')\r\n                                            }}\r\n                                            icon={<EditOutlined />}\r\n                                        />\r\n                                    </>\r\n                                    }\r\n\r\n                                    formatter={(val) => {\r\n                                        if (this.state.editCatagory) {\r\n                                            return (\r\n                                                <Select\r\n                                                    showSearch\r\n                                                    //style={{ width: 200 }}\r\n                                                    placeholder=\"Search to Select\"\r\n                                                    optionFilterProp=\"children\"\r\n                                                    onChange={(e) => {\r\n                                                        this.setState({\r\n                                                            values: {\r\n                                                                ...this.state.values,\r\n                                                                catagory: e\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    filterOption={(input, option) =>\r\n                                                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                    }\r\n                                                    value={this.state.values.catagory}\r\n                                                    filterSort={(optionA, optionB) =>\r\n                                                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                                                    }\r\n                                                >\r\n                                                    <Option value=\"Security\">Security</Option>\r\n                                                    <Option value=\"Data Loss\">Data Loss</Option>\r\n                                                    <Option value=\"Performance\">Performance</Option>\r\n                                                    <Option value=\"Crash/Hang\">Crash/Hang</Option>\r\n                                                    <Option value=\"Other Bug\">Other Bug</Option>\r\n                                                    <Option value=\"UI\">UI</Option>\r\n                                                    <Option value=\"New Feature\">New Feature</Option>\r\n                                                    <Option value=\"Enhancement\">Enhancement</Option>\r\n                                                </Select>)\r\n                                        } else {\r\n                                            return this.state.values.catagory\r\n                                        }\r\n                                    }}\r\n                                    value={'Crashes/Hang'} />\r\n\r\n                            </Col>\r\n\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n                                    title={<span style={{\r\n                                        marginTop: 10\r\n                                    }}>\r\n                                        Owner\r\n\r\n                                    </span>\r\n\r\n                                    }\r\n                                    value={this.props.bug.submitter.name} />\r\n                            </Col>\r\n\r\n                            <Col\r\n\r\n                                span={isMobile ? 12 : 8}>\r\n\r\n                                <Statistic\r\n                                    valueStyle={{\r\n                                        fontSize: 16\r\n                                    }}\r\n                                    title='Date Submited'\r\n                                    value={moment(new Date(this.props.bug.createdAt)).format('MMM Do YY')} />\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n\r\n                    </>\r\n                }</MediaQuery>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BugStats;\r\n","import React from 'react';\r\n// import moment from 'moment';\r\nimport {\r\n    Space,\r\n    Input, Avatar, Select,\r\n    Button, Divider, Typography, List, Pagination, Modal, message\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport axios from 'axios';\r\nimport {\r\n    withRouter,\r\n\r\n} from \"react-router-dom\";\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\n\r\n\r\nclass BugStats extends React.Component {\r\n    state = {\r\n        editAssigned: false,\r\n        assignees: [],\r\n        search: '',\r\n        page: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n        query: '',\r\n        members: [],\r\n        selectedMembers: []\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this._handleUpdateAssignees()\r\n    }\r\n\r\n    TOKEN = window.localStorage.getItem('token');\r\n\r\n    // updates and retrives ALL assignees. _handlePagination takes care of all pagination of array\r\n    _handleUpdateAssignees = async () => {\r\n        let { search } = this.state;\r\n\r\n        if (search === '') search = undefined;\r\n        // console.log(search)\r\n        try {\r\n            let { data } = await axios.get('/bug/assignee', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    bugId: this.props.bug.id,\r\n                    search\r\n                }\r\n            });\r\n\r\n            // console.log(data)\r\n            this.setState({\r\n                assignees: data.users,\r\n                total: data.total\r\n            })\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    _handlePagination = (page, pageSize) => {\r\n        if (page === 0) page = 1;\r\n\r\n        this.setState({\r\n            page,\r\n            pageSize\r\n        })\r\n    }\r\n\r\n    // TODO: only search for users apart of the project\r\n    _handleUserSearch = async () => {\r\n        let results;\r\n        const { query } = this.state;\r\n        try {\r\n            results = await axios.get('/user/search', {\r\n                params: {\r\n                    query: query,\r\n                    projectId: this.props.match.params.projectId,\r\n                    isIn: true\r\n                },\r\n                headers: getDefaultHeader(),\r\n            })\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n\r\n            return\r\n        }\r\n\r\n        //console.log(results.data)\r\n        let newMembers = [];\r\n        let users = results.data.results;\r\n        for (let i = 0; i < users.length; i++) {\r\n            newMembers.push({\r\n                key: users[i].id,\r\n                name: users[i].name,\r\n                email: users[i].email,\r\n                id: users[i].id\r\n            })\r\n        }\r\n        this.setState({\r\n            members: newMembers\r\n        })\r\n    }\r\n\r\n    _handleSelectUser = (val) => {\r\n        this.setState({\r\n            selectedMembers: val\r\n        })\r\n    }\r\n\r\n    _handleAddMembers = async () => {\r\n        const { selectedMembers } = this.state;\r\n        try {\r\n            await axios.post('/bug/assignee', {\r\n                assignees: selectedMembers.join(','),\r\n                bugId: this.props.bug.id\r\n            }, {\r\n                headers: getDefaultHeader(),\r\n            })\r\n            this.setState({ editAssigned: false })\r\n            message.success('Members added')\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { page, pageSize, members } = this.state;\r\n        // console.log(\"Page: \" + page)\r\n        // console.log('PageSize: ' + pageSize)\r\n\r\n        return (\r\n            <div>\r\n                <Space align='center'>\r\n                    <Title\r\n                        style={{\r\n                            margin: 0,\r\n                            marginRight: 10\r\n                        }}\r\n                        level={5}>Assigned To</Title>\r\n\r\n                </Space>\r\n\r\n                <Divider />\r\n                <List\r\n                    size=\"small\"\r\n                    header={<Space>\r\n\r\n                        <Input.Search\r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    search: e.target.value\r\n                                }, this._handleUpdateAssignees);\r\n                            }}\r\n                            placeholder=\"search\" style={{ width: 200 }} />\r\n                        <Button\r\n                            icon={<PlusOutlined />}\r\n                            onClick={() => this.setState({ editAssigned: true })} type='primary'>\r\n\r\n                        </Button>\r\n                    </Space>}\r\n                    footer={<div\r\n                        style={{\r\n                            width: '100%',\r\n                            display: 'inline-flex',\r\n                            justifyContent: 'flex-end'\r\n                        }}\r\n                    >\r\n\r\n                        <Pagination\r\n                            size=\"small\"\r\n                            total={this.state.total}\r\n                            current={this.state.page}\r\n                            onChange={this._handlePagination} showSizeChanger showQuickJumper />\r\n\r\n                    </div>}\r\n                    bordered\r\n                    dataSource={this.state.assignees}\r\n                    renderItem={(item, ind) => {\r\n                        //console.log(ind)\r\n                        if (ind >= (page - 1) * pageSize && ind < (page - 1) * pageSize + pageSize) {\r\n                            return (\r\n                                <List.Item key={item.id ?? ind}>\r\n                                    <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf', marginRight: 15 }}>\r\n                                        {item.name.substring(0, 1)}\r\n                                    </Avatar>\r\n                                    {`${item.name.split(' ')[0]} ${(item.name.split(' ')[1] ? item.name.split(' ')[1].substring(0, 1).toUpperCase() + '.' : '')} (${item.email})`}\r\n                                </List.Item>\r\n                            )\r\n                        }\r\n\r\n                        return null\r\n                    }\r\n                    }\r\n                />\r\n\r\n                <Modal title=\"Add More Members...\"\r\n                    visible={this.state.editAssigned}\r\n                    onOk={() => {\r\n                        this._handleAddMembers()\r\n                        this._handleUpdateAssignees()\r\n                    }} onCancel={() => this.setState({ editAssigned: false })}>\r\n                    <Select\r\n                        showSearch\r\n                        mode='multiple'\r\n                        // value={this.state.value}\r\n                        placeholder={\"search...\"}\r\n                        style={{ width: '100%' }}\r\n                        // defaultActiveFirstOption={false}\r\n                        // showArrow={false}\r\n                        filterOption={false}\r\n                        onSearch={(e) => {\r\n                            this.setState({\r\n                                query: e\r\n                            }, this._handleUserSearch)\r\n                        }}\r\n                        onChange={this._handleSelectUser}\r\n                    // notFoundContent={\"\"}\r\n                    >\r\n                        {/* <Option key={'1'}>{query}</Option> */}\r\n                        {\r\n                            members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Modal>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(BugStats);\r\n","import React from 'react';\r\n\r\nimport { Button, Divider, } from 'antd';\r\nimport {\r\n    message, Space,\r\n\r\n} from 'antd';\r\nimport {\r\n    EditOutlined\r\n} from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport { Editor as DraftEditor } from 'react-draft-wysiwyg';\r\nimport './../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport axios from 'axios';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Title, Paragraph, } = Typography;\r\n\r\n\r\n\r\nclass BugDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editDescription: false,\r\n            editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(this.props.bug.description))),\r\n            description: ''\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            description: this.props.bug.description\r\n        })\r\n        console.log(this.props.bug.description)\r\n    }\r\n\r\n    toggleFunc = (name) => {\r\n        this.setState({\r\n            [name]: !this.state[name]\r\n        })\r\n    }\r\n\r\n    updateDescription = async (text) => {\r\n        try {\r\n            await axios.put('/bug/' + this.props.bug.id, {\r\n                description: this.state.description\r\n            }, {\r\n                headers: getDefaultHeader(),\r\n            });\r\n\r\n            message.success(\"Description was updated!\")\r\n        } catch (e) {\r\n            let message = getErrorMessage(e)\r\n            console.error(message)\r\n            message.error('Error: ' + message)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <Space align='center'>\r\n                    <Title\r\n                        style={{\r\n                            margin: 0,\r\n                            marginRight: 10\r\n                        }}\r\n                        level={5}>Description</Title>\r\n                    <Button shape=\"circle\"\r\n                        onClick={() => {\r\n                            if (this.state.editDescription) {\r\n                                this.updateDescription()\r\n                            }\r\n                            this.toggleFunc('editDescription')\r\n                        }}\r\n                        icon={<EditOutlined />}\r\n                    />\r\n\r\n                </Space>\r\n\r\n                <Divider />\r\n                {\r\n                    this.state.editDescription ?\r\n                        <React.Fragment>\r\n                            <style>\r\n                                {`\r\n            .demo-editor {\r\n                padding: 0px 10px 0px 10px;\r\n                border-color: rgba(0,0,0,.1);\r\n                border-style: solid;\r\n                border-width: 1px;\r\n                min-height: 120px;\r\n                margin-bottom: 20px;\r\n            }\r\n            `}\r\n                            </style>\r\n                            <DraftEditor\r\n                                editorState={this.state.editorState}\r\n                                wrapperClassName=\"demo-wrapper\"\r\n                                editorClassName=\"demo-editor\"\r\n                                onEditorStateChange={(editorState) => {\r\n                                    this.setState({\r\n                                        description: draftToHtml(convertToRaw(editorState.getCurrentContent())),\r\n                                        editorState\r\n                                    })\r\n                                }}\r\n                            />\r\n                            {/* <Button\r\n                                style={{\r\n                                    marginBottom: 30\r\n                                }}\r\n                                onClick={() => this.setState({ editDescription: false })}\r\n                                htmlType=\"submit\" type=\"primary\">\r\n                                Update\r\n                            </Button> */}\r\n                        </React.Fragment> :\r\n                        <Paragraph >\r\n                            <div\r\n                                // style={{ textAlign: 'center' }}\r\n                                dangerouslySetInnerHTML={{ __html: this.state.description }} />\r\n                        </Paragraph>\r\n\r\n                }\r\n                <br />\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BugDescription;\r\n","import React from 'react';\r\n\r\nimport { Button, Divider, Upload } from 'antd';\r\nimport {\r\n\r\n    List, message, Space,\r\n\r\n} from 'antd';\r\nimport {\r\n    EditOutlined, InboxOutlined\r\n} from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Title } = Typography;\r\nconst { Dragger } = Upload;\r\n\r\nclass BugDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editFiles: false,\r\n            files: [],\r\n            filesToRender: []\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(this.props.bug.files)\r\n        let tempFiles = this.props.bug.files.map((item) => {\r\n            let tempFile = new File([], item.name)\r\n            tempFile.uid = '' + (new Date()).getTime() + '-' + tempFile.name;\r\n            tempFile.serverId = item.id;\r\n            tempFile.isUploaded = true;\r\n            return tempFile;\r\n        })\r\n        this.setState({\r\n            files: tempFiles\r\n        })\r\n    }\r\n\r\n    toggleFunc = (name) => {\r\n        this.setState({\r\n            [name]: !this.state[name]\r\n        })\r\n    }\r\n    token = window.localStorage.getItem('token');\r\n\r\n    beforeUpload = async (file) => {\r\n\r\n        let formData = new FormData()\r\n        formData.append('files', file);\r\n        // handle uploading\r\n        try {\r\n            let { data } = await axios.post('/file/', formData, {\r\n                headers: {\r\n                    ...(getDefaultHeader()),\r\n                    // 'x-auth-token': this.token,\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n                params: {\r\n                    bugId: this.props.bug.id\r\n                },\r\n                // onUploadProgress: (progress) => console.log(progress)\r\n            })\r\n            file.isUploaded = true;\r\n            // console.log(data)\r\n            let fileId = data.uploadedFiles[0].id;\r\n            file.serverId = fileId;\r\n            message.success(`\"${file.name}\" was uploaded!\"`)\r\n            this.setState({\r\n                files: [...this.state.files, file]\r\n            })\r\n        } catch (e) {\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    _onFileDelete = async (file) => {\r\n        let { files } = this.state;\r\n        // console.log(\"HEY\")\r\n        for (let i = 0; i < files.length; i++) {\r\n            if (files[i].uid === file.uid) {\r\n                try {\r\n\r\n                    await axios.delete('/file/' + file.serverId, {\r\n                        headers: getDefaultHeader(),\r\n                    })\r\n\r\n                    message.success(`\"${file.name}\" was deleted!`)\r\n                    files.splice(i, 1);\r\n                    this.setState({\r\n                        files\r\n                    })\r\n\r\n                } catch (e) {\r\n                    message.error(\"Error: \" + getErrorMessage(e))\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // if file was uploaded to server, remove on server\r\n    }\r\n\r\n    _onFileUpload = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Space align='center'>\r\n                    <Title\r\n                        style={{\r\n                            margin: 0,\r\n                            marginRight: 10\r\n                        }}\r\n                        level={5}>Files</Title>\r\n                    <Button\r\n                        onClick={() => this.toggleFunc('editFiles')}\r\n                        shape=\"circle\"\r\n                        icon={<EditOutlined />}\r\n                    />\r\n\r\n                </Space>\r\n\r\n                <Divider />\r\n                {\r\n                    this.state.editFiles ?\r\n                        <Dragger\r\n                            style={{\r\n                                marginBottom: 20\r\n                            }}\r\n                            multiple\r\n                            beforeUpload={this.beforeUpload}\r\n                            onRemove={this._onFileDelete}\r\n                            fileList={this.state.files}\r\n                        >\r\n\r\n                            <p className=\"ant-upload-drag-icon\">\r\n                                <InboxOutlined />\r\n                            </p>\r\n                            <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                            <p className=\"ant-upload-hint\">\r\n                                Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                                band files\r\n                            </p>\r\n                        </Dragger> :\r\n                        <List\r\n                            bordered\r\n                            size='small'\r\n                            dataSource={this.state.files}\r\n                            renderItem={item => <List.Item key={item.serverId}>\r\n                                <a href={baseUrl + \"/file/\" + item.serverId}>{item.name}</a>\r\n                            </List.Item>}\r\n                        />\r\n\r\n                }\r\n                <br />\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default BugDescription;\r\n","import React from 'react';\r\nimport BugDissussion from '../../../components/BugDiscussion';\r\nimport BugStats from '../../../components/BugStats';\r\nimport BugAssignedTo from '../../../components/BugAssignedTo';\r\nimport BugDescription from '../../../components/BugDescription';\r\nimport BugFiles from './../../../components/BugFiles';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <BugStats bugId={this.props.bug.id} bug={this.props.bug} />\r\n\r\n\r\n                <BugDescription bug={this.props.bug} description={this.props.bug.description} />\r\n\r\n                <BugFiles bug={this.props.bug} />\r\n\r\n                <BugAssignedTo bug={this.props.bug} />\r\n\r\n                <BugDissussion bug={this.props.bug} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import { List, Popconfirm, } from 'antd'\r\nimport moment from \"moment\"\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nfunction BugList(props) {\r\n    const {\r\n        page,\r\n        totalBugCount,\r\n        _handlePaginationChange,\r\n        bugs,\r\n        isMobile,\r\n        viewBug,\r\n        shareBug,\r\n        deleteBug\r\n    } = props;\r\n\r\n    const actions = item => [\r\n        <a\r\n            style={{\r\n                margin: 10\r\n            }}\r\n            key=\"list-loadmore-edit\"\r\n            onClick={(e) => viewBug(e, item)}>\r\n            view\r\n        </a>,\r\n        <a\r\n            style={{\r\n                margin: 10\r\n            }}\r\n            key=\"list-loadmore-edit\"\r\n            onClick={(e) => shareBug(e, item)}>\r\n            share\r\n        </a>,\r\n        <Popconfirm\r\n            title=\"Are you sure?\"\r\n            onConfirm={() => deleteBug(item.id)}\r\n        >\r\n            <a\r\n\r\n                key=\"list-loadmore-edit\"\r\n                style={{ color: 'red', marginLeft: 10 }}\r\n                onClick={(e) => {\r\n\r\n                    e.preventDefault()\r\n                }}>\r\n                delete\r\n            </a>\r\n        </Popconfirm>\r\n    ]\r\n\r\n\r\n    return (<>\r\n        {isMobile && <style>{`\r\n    #bugg-bugs-list .ant-list-item-action {\r\n        justify-content: space-evenly;\r\n    display: inline-flex;\r\n    width: 100%;\r\n    }\r\n    `}</style>}\r\n        <List\r\n            // className=\"demo-loadmore-list\"\r\n            style={{\r\n                maxWidth: 1000\r\n            }}\r\n            id=\"bugg-bugs-list\"\r\n            pagination={{\r\n                // style={{ float: 'right', marginTop: 20 }}\r\n                current: page,\r\n                defaultCurrent: 1,\r\n                total: totalBugCount,\r\n                onChange: _handlePaginationChange\r\n            }}\r\n            // loading={initLoading}\r\n            // itemLayout=\"horizontal\"\r\n            itemLayout={isMobile ? 'vertical' : 'horizontal'}\r\n            // loadMore={loadMore}\r\n            dataSource={bugs}\r\n            renderItem={item => (\r\n                <List.Item\r\n                    key={item.id}\r\n                    actions={actions(item)}\r\n\r\n                >\r\n\r\n                    <List.Item.Meta\r\n\r\n                        title={<div style={{\r\n                            display: 'inline'\r\n                        }}>\r\n                            <a href=\"#\" onClick={(e) => viewBug(e, item)}>\r\n                                {item.title}\r\n                            </a>\r\n\r\n                        </div>}\r\n\r\n                        description={item.plainTextDescription}\r\n                    />\r\n                    <div>{'Last modified ' + moment(new Date(item.updatedAt)).fromNow()}</div>\r\n\r\n                </List.Item>\r\n            )}\r\n        />\r\n    </>\r\n    )\r\n}\r\n\r\nexport default withRouter(BugList)","import axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from '../../../pages/config';\r\nimport { getErrorMessage } from '../../network-error-handling';\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\n/**\r\n * Gets announcement based on announcementId\r\n * @param {string} announcementId\r\n * @returns {Object} Bug\r\n */\r\nconst getAnnouncement = async (announcementId) => {\r\n    try {\r\n        let { data: { announcement } } = await axios.get(baseUrl + '/announcement', {\r\n            headers: getDefaultHeader(),\r\n            params: {\r\n                announcementId\r\n            }\r\n        })\r\n\r\n        return announcement\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\nlet object = {\r\n    getAnnouncement\r\n};\r\n\r\nexport default object\r\n\r\n","import axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from './../../../pages/config';\r\nimport { getErrorMessage } from './../../network-error-handling';\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\n/**\r\n * Gets bug based on bugId\r\n * @param {string} bugId\r\n * @returns {Object} Bug\r\n */\r\nconst getBug = async (bugId) => {\r\n    try {\r\n        let { data: { bug } } = await axios.get(baseUrl + '/bug/' + bugId, {\r\n            headers: getDefaultHeader()\r\n        })\r\n\r\n        return bug\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\nconst deleteBug = async (bugId) => {\r\n    try {\r\n        await axios.delete(baseUrl + '/bug/' + bugId, {\r\n            headers: getDefaultHeader()\r\n        })\r\n\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\nexport default {\r\n    getBug,\r\n    deleteBug\r\n}\r\n\r\n","import axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from '../../../pages/config';\r\nimport { getErrorMessage } from '../../network-error-handling';\r\n\r\n\r\nfunction UserData(obj = {\r\n    name: '',\r\n    email: '',\r\n    id: '',\r\n    iconId: ''\r\n}) {\r\n    this.name = obj.name;\r\n    this.email = obj.email;\r\n    this.id = obj.id;\r\n    this.iconId = obj.iconId\r\n}\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\n\r\n/**\r\n * Leave project (only works if use is not owner)\r\n * @param {string} projectId\r\n * @returns \r\n */\r\nconst leaveProject = async (projectId) => {\r\n    try {\r\n        await axios.delete(baseUrl + '/project/member/me', {\r\n            headers: getDefaultHeader(),\r\n            params: {\r\n                projectId\r\n            }\r\n        })\r\n\r\n    } catch (e) {\r\n        throw new Error(getErrorMessage(e))\r\n    }\r\n}\r\nfunction validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\n\r\nexport default ({\r\n    leaveProject\r\n})\r\n\r\n","import axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from '../../../pages/config';\r\nimport { getErrorMessage } from '../../network-error-handling';\r\n\r\n\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\n/**\r\n * Gets all conversations\r\n * @returns {Array}\r\n */\r\nconst getConversations = async () => {\r\n    try {\r\n\r\n\r\n        let { data: { conversations } } = await axios.get(baseUrl + '/conversation/all', {\r\n            headers: getDefaultHeader()\r\n        })\r\n\r\n        return conversations\r\n\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\nconst readAllMessages = async (conversationId) => {\r\n    try {\r\n        await axios.patch(baseUrl + '/message/read/' + conversationId, {}, {\r\n            headers: getDefaultHeader()\r\n        })\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\nexport default ({\r\n    getConversations,\r\n    readAllMessages\r\n})\r\n\r\n","import axios from 'axios';\r\nimport { getDefaultHeader, baseUrl } from '../../../pages/config';\r\nimport { getErrorMessage } from '../../network-error-handling';\r\n\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\n/**\r\n * Gets all\r\n * @returns {Number}\r\n */\r\nconst getUnreadNotifications = async () => {\r\n    try {\r\n        let { data: { totalUnreadNotifcations } } = await axios.get(baseUrl + '/notification/all', {\r\n            headers: getDefaultHeader(),\r\n            params: {\r\n                limit: 0,\r\n                skip: 0\r\n            }\r\n        })\r\n\r\n        return totalUnreadNotifcations\r\n\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\n\r\nexport default ({\r\n    getUnreadNotifications\r\n})\r\n\r\n","import axios from 'axios';\r\nimport { getErrorMessage } from './../../network-error-handling'\r\nimport { baseUrl, getDefaultHeader } from './../../../pages/config';\r\n\r\nfunction UserData(obj = {\r\n    name: '',\r\n    email: '',\r\n    id: '',\r\n    iconId: ''\r\n}) {\r\n    this.name = obj.name;\r\n    this.email = obj.email;\r\n    this.id = obj.id;\r\n    this.iconId = obj.iconId\r\n}\r\n\r\nconst throwError = err => {\r\n    throw new Error(getErrorMessage(err))\r\n}\r\n\r\nconst getMe = async () => {\r\n    try {\r\n        let { data } = await axios.get(baseUrl + '/user/me', {\r\n            headers: getDefaultHeader()\r\n        })\r\n        const { id, name, email, iconId } = data.user;\r\n        let user = {\r\n            id, name, email, iconId\r\n        }\r\n        return new UserData(user)\r\n    } catch (e) {\r\n        throw new Error(getErrorMessage(e))\r\n    }\r\n}\r\nfunction validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\n/**\r\n * updates user (name or email ONLY)\r\n * @param {string} field \r\n * @param {string} value \r\n * @returns {UserData} updated user\r\n */\r\nconst updateUser = async (field, value) => {\r\n    if (field === 'email' && !validateEmail(value)) {\r\n        throw new Error('Email is invalid')\r\n    }\r\n    try {\r\n        let { data: { user } } = await axios.put(baseUrl + '/user/update', {\r\n            [field]: value\r\n        }, {\r\n            headers: getDefaultHeader()\r\n        });\r\n\r\n        return new UserData(user)\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Updates password, MUST SET TOKEN AFTER THIS\r\n * @param {string} password current password\r\n * @param {string} newPassword new password\r\n * @returns {string} token\r\n */\r\nconst updatePassword = async (password, newPassword) => {\r\n    try {\r\n        let { data } = await axios.patch(baseUrl + '/user/password', {\r\n            password,\r\n            newPassword\r\n        }, {\r\n            headers: getDefaultHeader()\r\n        });\r\n        // console.log(data)\r\n        return data.token\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n/**\r\n * Returns user avatar icon based on user id. Returns logged in user id by \r\n * default\r\n * @param {string} id\r\n * @returns {string} iconId\r\n */\r\nconst getUserIconUri = async (id) => {\r\n    try {\r\n        let { iconId } = await getMe();\r\n        if (iconId) {\r\n            return baseUrl + '/user/icon/' + iconId\r\n        } else {\r\n            return ''\r\n        }\r\n    } catch (e) {\r\n        throwError(e);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Uploads user avatar\r\n * @param {FormData} formData attatch 1 icon to \"icon\" \r\n */\r\nconst uploadUserIcon = async (formData) => {\r\n    try {\r\n        if (!formData) throw new Error('Must have formData')\r\n\r\n        await axios.post(baseUrl + '/user/icon', formData, {\r\n            headers: {\r\n                ...(getDefaultHeader()),\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        throwError(e)\r\n    }\r\n}\r\n\r\nlet obj = {\r\n    getMe,\r\n    updateUser,\r\n    updatePassword,\r\n    getUserIconUri,\r\n    uploadUserIcon\r\n}\r\n\r\nexport {\r\n    getMe,\r\n    updateUser,\r\n    updatePassword,\r\n    getUserIconUri,\r\n    uploadUserIcon\r\n};\r\nexport default obj;\r\n\r\n","import axios from 'axios';\r\nimport Announcement from './bugg-services/Announcement/index';\r\nimport Bug from './bugg-services/Bug/index';\r\nimport Project from './bugg-services/Project/index';\r\nimport Message from './bugg-services/Message/index';\r\nimport Notification from './bugg-services/Notification/index';\r\nimport User from './bugg-services/User/index';\r\nimport { getErrorMessage } from './network-error-handling';\r\nimport { getDefaultHeader, baseUrl } from './../pages/config'\r\n\r\nfunction UserData(obj = {\r\n    name: '',\r\n    email: '',\r\n    id: ''\r\n}) {\r\n    this.name = obj.name;\r\n    this.email = obj.email;\r\n    this.id = obj.id;\r\n}\r\n\r\nconst getMe = async () => {\r\n    try {\r\n        let { data } = await axios.get(baseUrl + '/user/me', {\r\n            headers: getDefaultHeader()\r\n        })\r\n        const { id, name, email } = data.user;\r\n        let user = {\r\n            id, name, email\r\n        }\r\n        return new UserData(user)\r\n    } catch (e) {\r\n        throw new Error(getErrorMessage(e))\r\n    }\r\n}\r\n\r\n\r\nlet bugg = {\r\n    /**\r\n     * Gets user info from server\r\n     * @returns {UserData} user\r\n     */\r\n    getMe,\r\n    User,\r\n    Notification,\r\n    Message,\r\n    Bug,\r\n    Announcement,\r\n    Project\r\n}\r\n\r\n\r\nexport {\r\n    getMe,\r\n    User,\r\n    Notification,\r\n    Message,\r\n    Bug,\r\n    Announcement,\r\n    Project\r\n}\r\nexport default bugg;\r\n\r\n","import React from 'react';\r\nimport {\r\n    withRouter,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport CreateBug from './../../../components/CreateBug';\r\nimport { Button, message, Modal, notification } from 'antd';\r\nimport {\r\n    List, Skeleton,\r\n    Menu, Dropdown, Switch as AntSwitch, Space, Drawer,\r\n    Input, Pagination,\r\n    Popconfirm\r\n} from 'antd';\r\nimport {\r\n    CalendarOutlined,\r\n    DownOutlined,\r\n    FontSizeOutlined,\r\n    FileSyncOutlined,\r\n\r\n} from '@ant-design/icons';\r\nimport ViewBug from './ViewBug';\r\nimport axios from 'axios';\r\nimport MediaQuery from 'react-responsive'\r\nimport BugList from './../../../components/BugList';\r\nimport bugg from '../../../libraries/bugg';\r\nimport { getErrorMessage, logErrorMessage } from '../../../libraries/network-error-handling';\r\nimport { getDefaultHeader, staticServerUrl } from '../../config';\r\n\r\nconst { Search } = Input;\r\n\r\n\r\n\r\nconst selectedColor = '#1890ff';\r\n\r\n\r\n\r\nconst menu = (props) => (\r\n    <Menu\r\n\r\n        onClick={props.handleChange}>\r\n        <Menu.Item key=\"1\"\r\n\r\n            icon={<CalendarOutlined style={{\r\n                color: props.selectedSort === '1' ? selectedColor : 'unset'\r\n            }}\r\n            />}\r\n        >\r\n            <span style={{\r\n                color: props.selectedSort === '1' ? selectedColor : 'unset'\r\n            }}>\r\n                Upload Date\r\n            </span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" icon={<FontSizeOutlined style={{\r\n            color: props.selectedSort === '2' ? selectedColor : 'unset'\r\n        }} />}>\r\n            <span style={{\r\n                color: props.selectedSort === '2' ? selectedColor : 'unset'\r\n            }}>\r\n                Title\r\n            </span>\r\n\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\" icon={<FileSyncOutlined style={{\r\n            color: props.selectedSort === '3' ? selectedColor : 'unset'\r\n        }} />}>\r\n            <span style={{\r\n                color: props.selectedSort === '3' ? selectedColor : 'unset'\r\n            }}>\r\n                Last Modified\r\n            </span>\r\n\r\n        </Menu.Item>\r\n    </Menu>\r\n);\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggleCreatePopup: false,\r\n            toggleViewBugPopup: false,\r\n            toggleDrawer: false,\r\n            totalBugCount: 0,\r\n            pageSize: 10,\r\n            searchQuery: '',\r\n            sortBy: '',\r\n            page: 1,\r\n            bugs: [],\r\n            selectedSort: '0',\r\n            checked: true,\r\n            selectedBug: null,\r\n            selectedBugTitle: '',\r\n            search: ''\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchBugs()\r\n        this.handleActionUri()\r\n\r\n    }\r\n\r\n    _handlePaginationChange = (page, pageSize) => {\r\n        if (page === this.state.page && pageSize === this.state.pageSize) return;\r\n        this.setState({\r\n            page,\r\n            pageSize\r\n        }, this.fetchBugs)\r\n\r\n    }\r\n\r\n    deleteBug = async (bugId) => {\r\n        try {\r\n            await bugg.Bug.deleteBug(bugId);\r\n            this.fetchBugs()\r\n            message.success(\"Bug was deleted\")\r\n        } catch (e) {\r\n            message.error('Bug could not be deleted: ' + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    fetchBugs = async () => {\r\n        let id = this.props.location.pathname.split('/');\r\n        id = id[id.length - 1];\r\n        let { pageSize, page, search } = this.state;\r\n\r\n        if (search) {\r\n            page = 1\r\n        } else {\r\n            search = undefined\r\n        }\r\n\r\n        let order;\r\n        let sortBy;\r\n        let { selectedSort, checked } = this.state;\r\n        if (selectedSort === '1') {\r\n            sortBy = 'upload-date'\r\n        } else if (selectedSort === '2') {\r\n            sortBy = 'title'\r\n        } else if (selectedSort === '3') {\r\n            sortBy = 'last-modified'\r\n        }\r\n        if (selectedSort !== '0') {\r\n            if (checked) {\r\n                order = 'ASC'\r\n            } else {\r\n                order = 'DESC'\r\n            }\r\n        }\r\n\r\n        try {\r\n            let { data } = await axios.get('/bug/all', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    projectId: id,\r\n                    limit: pageSize,\r\n                    skip: pageSize * (page - 1),\r\n                    search,\r\n                    sortBy,\r\n                    order\r\n                }\r\n            });\r\n            //console.log(data)\r\n            this.setState({\r\n                bugs: data.bugs,\r\n                totalBugCount: data.total,\r\n                page\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens bug based on bug Id (fetches from server)\r\n     * @param {string} bugId \r\n     */\r\n    openBug = async (bugId) => {\r\n        try {\r\n            let bug = await bugg.Bug.getBug(bugId);\r\n            if (!bug) throw new Error('Bug not found')\r\n            this.props.history.push(this.props.location.pathname)\r\n            this.setState({\r\n                selectedBug: bug,\r\n                toggleDrawer: true,\r\n                selectedBugTitle: bug.title\r\n            })\r\n        } catch (e) {\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleActionUri = () => {\r\n        const { location } = this.props;\r\n        let query = new URLSearchParams(location.search)\r\n        if (query.get('action') === 'OPEN_BUG' && query.get('bugId') !== null) {\r\n            this.openBug(query.get('bugId'))\r\n        }\r\n    }\r\n\r\n    toggleFunc = (name) => {\r\n        this.setState({\r\n            [name]: !this.state[name]\r\n        })\r\n    }\r\n\r\n    _handleSortChange = (obj) => {\r\n        //console.log(obj)\r\n        if (obj.key === this.state.selectedSort) {\r\n            this.setState({\r\n                selectedSort: '0',\r\n                page: 1\r\n            }, this.fetchBugs)\r\n        } else {\r\n            this.setState({\r\n                selectedSort: obj.key,\r\n                page: 1\r\n            }, this.fetchBugs)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const locationChanged = this.props.location !== prevProps.location;\r\n        if (locationChanged) {\r\n            let id = this.props.location.pathname.split('/');\r\n            id = id[id.length - 1];\r\n            this.setState({\r\n                search: '',\r\n                page: 1\r\n            }, this.fetchBugs)\r\n\r\n            // parse action from url\r\n            this.handleActionUri()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        var listData = [];\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            listData.push({ bugId: 'y938cbu9', title: 'Videos will not play', state: 'priority', loading: false })\r\n        }\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <div>\r\n                        <div style={{\r\n                            marginBottom: 20,\r\n                            gap: 6,\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap'\r\n                        }}>\r\n                            <Button\r\n\r\n                                type=\"primary\" onClick={() => this.toggleFunc('toggleCreatePopup')}>Submit New</Button>\r\n                            <Button\r\n                                onClick={this.fetchBugs}\r\n                            >\r\n                                Refresh\r\n                            </Button>\r\n\r\n                            <Search\r\n                                value={this.state.search}\r\n                                placeholder=\"Search\"\r\n                                onChange={(e) => {\r\n                                    this.setState({\r\n                                        search: e.target.value\r\n                                    }, this.fetchBugs)\r\n                                }}\r\n                                onSearch={(e) => {\r\n                                    this.fetchBugs()\r\n                                }} style={{ width: 200 }} />\r\n\r\n                            <Dropdown overlay={menu({\r\n                                selectedSort: this.state.selectedSort,\r\n                                handleChange: this._handleSortChange\r\n                            })}>\r\n                                <Button>\r\n                                    Sort By <DownOutlined />\r\n                                </Button>\r\n                            </Dropdown>\r\n                            {\r\n                                this.state.selectedSort !== '0' ?\r\n                                    <AntSwitch\r\n                                        checkedChildren=\"ASC\"\r\n                                        unCheckedChildren=\"DESC\"\r\n                                        defaultChecked\r\n                                        onChange={(checked) => {\r\n\r\n                                            this.setState({\r\n                                                page: 1,\r\n                                                checked\r\n                                            }, this.fetchBugs)\r\n\r\n                                        }}\r\n                                    />\r\n                                    : null\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <Modal\r\n                            destroyOnClose\r\n                            title=\"Submit New Bug\"\r\n                            visible={this.state.toggleCreatePopup}\r\n                            // onOk={() => this.toggleFunc('toggleCreatePopup')}\r\n                            width={900}\r\n                            footer={null}\r\n                            onCancel={() => this.toggleFunc('toggleCreatePopup')}>\r\n                            <CreateBug\r\n                                _handleListUpdate={this.fetchBugs}\r\n                                toggleFunc={() => this.toggleFunc('toggleCreatePopup')}\r\n                            />\r\n                        </Modal>\r\n\r\n                        {\r\n                            // Bug list\r\n                        }\r\n                        <div style={{\r\n                            marginRight: isMobile ? 10 : 64\r\n                        }}>\r\n\r\n\r\n                            <BugList\r\n                                page={this.state.page}\r\n                                totalBugCount={this.state.totalBugCount}\r\n                                _handlePaginationChange={this._handlePaginationChange}\r\n                                bugs={this.state.bugs}\r\n                                isMobile={isMobile}\r\n                                viewBug={(e, item) => {\r\n                                    this.setState({\r\n                                        toggleDrawer: true,\r\n                                        selectedBugTitle: item.title,\r\n                                        selectedBug: item\r\n                                    })\r\n                                    e.preventDefault()\r\n                                }}\r\n                                shareBug={async (e, item) => {\r\n                                    e.preventDefault()\r\n                                    let textToCopy = staticServerUrl + '/dashboard/projects/' + item.project + '?action=OPEN_BUG&bugId=' + item.id;\r\n                                    if (navigator.clipboard) {\r\n                                        await navigator.clipboard.writeText(textToCopy);\r\n                                        message.success('Link copied to clipboard!')\r\n                                    } else {\r\n                                        window.Clipboard.copy(textToCopy)\r\n                                        message.success('Link copied to clipboard!')\r\n                                    }\r\n\r\n                                }}\r\n                                deleteBug={this.deleteBug}\r\n\r\n                            />\r\n\r\n                        </div>\r\n                        <Drawer\r\n                            width={isMobile ? '100%' : 800}\r\n                            title={this.state.selectedBugTitle}\r\n                            placement=\"right\"\r\n                            closable={true}\r\n                            onClose={() => {\r\n                                this.fetchBugs();\r\n                                this.setState({ toggleDrawer: false })\r\n                            }}\r\n                            visible={this.state.toggleDrawer}\r\n                            destroyOnClose\r\n                        >\r\n                            <ViewBug bug={this.state.selectedBug} />\r\n                        </Drawer>\r\n\r\n\r\n                    </div>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n// Safari copy to clipboard fix\r\nwindow.Clipboard = (function (window, document, navigator) {\r\n    var textArea,\r\n        copy;\r\n\r\n    function isOS() {\r\n        return navigator.userAgent.match(/ipad|iphone/i);\r\n    }\r\n\r\n    function createTextArea(text) {\r\n        textArea = document.createElement('textArea');\r\n        textArea.value = text;\r\n        document.body.appendChild(textArea);\r\n    }\r\n\r\n    function selectText() {\r\n        var range,\r\n            selection;\r\n\r\n        if (isOS()) {\r\n            range = document.createRange();\r\n            range.selectNodeContents(textArea);\r\n            selection = window.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n            textArea.setSelectionRange(0, 999999);\r\n        } else {\r\n            textArea.select();\r\n        }\r\n    }\r\n\r\n    function copyToClipboard() {\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n    }\r\n\r\n    copy = function (text) {\r\n        createTextArea(text);\r\n        selectText();\r\n        copyToClipboard();\r\n    };\r\n\r\n    return {\r\n        copy: copy\r\n    };\r\n})(window, document, navigator);\r\n\r\n\r\nexport default withRouter(App);\r\n","import { useState } from 'react';\r\nimport { Form, Button, Input, Space, message } from 'antd'\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport axios from 'axios';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nfunction CreateAnnouncement(props) {\r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty())\r\n    // const [title, setTitle] = useState('');\r\n    const [form] = Form.useForm();\r\n\r\n    const onFormSubmit = async (vals) => {\r\n\r\n        let title = vals.title;\r\n        let body = draftToHtml(convertToRaw(editorState.getCurrentContent()));\r\n\r\n        try {\r\n            await axios.post('/announcement', {\r\n                projectId: props.project.id,\r\n                title,\r\n                body\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            message.success('Announcement was created')\r\n            props.closeModal()\r\n            props.updateList()\r\n            // TODO, refresh list on create\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n\r\n    }\r\n\r\n    return (<div>\r\n\r\n        <Space direction='vertical' style={{ width: '100%' }}>\r\n            <Form\r\n                layout='vertical'\r\n                onFinish={onFormSubmit}\r\n                form={form}\r\n            >\r\n                <Form.Item\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please add a title',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        type=\"text\" />\r\n                </Form.Item>\r\n                <style>\r\n                    {`\r\n                    .demo-editor {\r\n                        padding: 0px 10px 0px 10px;\r\n                        border-color: rgba(0,0,0,.1);\r\n                        border-style: solid;\r\n                        border-width: 1px;\r\n                        min-height: 150px\r\n                    }\r\n                    `}\r\n                </style>\r\n                <Form.Item\r\n                    label=\"Body\"\r\n                    name=\"body\"\r\n\r\n                >\r\n                    <Editor\r\n                        editorState={editorState}\r\n                        wrapperClassName=\"demo-wrapper\"\r\n                        editorClassName=\"demo-editor\"\r\n                        onEditorStateChange={setEditorState}\r\n                    />\r\n                </Form.Item>\r\n\r\n\r\n                <Space style={{\r\n                    width: '100%',\r\n                    marginTop: 20,\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'flex-end'\r\n                }}>\r\n                    <Button onClick={props.closeModal}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        htmlType='submit'\r\n                        type='primary'>\r\n                        Create\r\n                    </Button>\r\n                </Space>\r\n            </Form>\r\n\r\n\r\n\r\n\r\n\r\n        </Space>\r\n\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default CreateAnnouncement;\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Space,\r\n    Menu,\r\n\r\n    Divider,\r\n    Empty,\r\n    Avatar,\r\n    List,\r\n    Tag,\r\n    Input,\r\n    Modal,\r\n\r\n    Spin,\r\n    notification,\r\n    Drawer\r\n} from 'antd';\r\nimport {\r\n    withRouter,\r\n\r\n} from \"react-router-dom\";\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport CreateAnnouncement from '../../../components/CreateAnnouncement';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport moment from 'moment';\r\nimport MediaQuery from 'react-responsive';\r\nimport bugg from '../../../libraries/bugg';\r\nimport { getErrorMessage, logErrorMessage } from '../../../libraries/network-error-handling';\r\nimport { getDefaultHeader } from '../../config';\r\n\r\n\r\n\r\nconst { Search } = Input;\r\n\r\nfunction Message(props) {\r\n    if (props.announcement === null) return null;\r\n    return (<><div style={{\r\n        display: 'inline-flex',\r\n        alignItems: 'center'\r\n    }}>\r\n        <Avatar size={64}\r\n            style={{\r\n                marginRight: 20\r\n            }}\r\n            icon={<UserOutlined />} />\r\n        <span>\r\n            <p style={{\r\n                margin: 0,\r\n                fontSize: 18\r\n            }}>\r\n                <b>{props.announcement.submitter.name}</b>\r\n            </p>\r\n            <p style={{\r\n                margin: 0\r\n            }}>\r\n                Director\r\n            </p>\r\n        </span>\r\n        <span>\r\n            <Button type=\"text\" style={{\r\n                color: '#1890ff',\r\n                marginLeft: 20\r\n            }}>Reply</Button>\r\n        </span>\r\n    </div>\r\n        <Divider />\r\n        <h1>\r\n            {props.announcement.title}\r\n        </h1>\r\n        <p\r\n            dangerouslySetInnerHTML={{ __html: props.announcement.body }}\r\n            style={{ maxWidth: 700 }}>\r\n\r\n        </p></>\r\n    )\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthed: false,\r\n            createAnnouncement: false,\r\n            selectedAnnouncement: null,\r\n            announcements: [],\r\n            total: 0,\r\n            loading: false,\r\n            search: '',\r\n            sortBy: '',\r\n            hasMore: true,\r\n            firstLoad: true\r\n        };\r\n\r\n    }\r\n\r\n    // Fetch initial annoncements and data\r\n    async componentDidMount() {\r\n        // await (new Promise((res) => this.setState({ loading: true }, res)))\r\n        // await this.fetchAndSetAnnouncements();\r\n        // this.setState({ loading: false })\r\n        this.handleOpenAnnouncement()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const locationChanged = this.props.location !== prevProps.location;\r\n        if (locationChanged) {\r\n            this.fetchAndSetAnnouncements(true)\r\n            //this.setState({selectedAnnouncement: null}, )\r\n            this.handleOpenAnnouncement()\r\n\r\n        }\r\n        let uriProjectId = this.props.location.pathname.split('/');\r\n        uriProjectId = uriProjectId[uriProjectId.length - 1]\r\n        if (this.state.selectedAnnouncement && uriProjectId !== this.state.selectedAnnouncement.project) {\r\n            this.setState({ selectedAnnouncement: null })\r\n        }\r\n    }\r\n\r\n    formatName = (name) => {\r\n        var nameSegments = name.split(' ');\r\n        let shortHandName = nameSegments[0];\r\n\r\n        if (nameSegments[1]) {\r\n            shortHandName += ' ' + nameSegments[1].substring(0, 1).toUpperCase() + '.'\r\n        }\r\n\r\n        return shortHandName\r\n    }\r\n\r\n    handleOpenAnnouncement = async () => {\r\n        const { location } = this.props;\r\n        let query = new URLSearchParams(location.search)\r\n        if (query.get('action') === 'OPEN_ANNOUNCEMENT' && query.has('announcementId')) {\r\n            try {\r\n\r\n                let announcement = await bugg.Announcement.getAnnouncement(query.get('announcementId'));\r\n\r\n                if (!announcement) throw new Error('Announcement not found')\r\n\r\n                this.props.history.push(location.pathname);\r\n\r\n                this.setState({\r\n                    selectedAnnouncement: announcement\r\n                })\r\n                this.fetchAndSetAnnouncements()\r\n            } catch (e) {\r\n                notification.error({\r\n                    message: getErrorMessage(e)\r\n                })\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // fetch announcemnents, set data, and total that match the query\r\n    // will append new announcemnts\r\n    // DOES NOT CHANGE LOADING STATE\r\n    // Will query for 20 at a time\r\n    fetchAndSetAnnouncements = async (resetList) => {\r\n        // await (new Promise((res) => setTimeout(res, 2000)))\r\n        const { announcements, search, sortBy } = this.state\r\n        let skip = announcements.length;\r\n        if (resetList) {\r\n            skip = 0;\r\n            // await (new Promise((res) => this.setState({ hasMore: true }, res)))\r\n        }\r\n        const limit = 5;\r\n\r\n        try {\r\n            let uriProjectId = this.props.location.pathname.split('/');\r\n            uriProjectId = uriProjectId[uriProjectId.length - 1]\r\n            let { data } = await axios.get('/announcement/', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    projectId: uriProjectId,\r\n                    limit,\r\n                    skip,\r\n                    search,\r\n                    sortBy\r\n                }\r\n            });\r\n            console.log(data);\r\n            let newAnnouncements;\r\n\r\n            if (resetList) {\r\n                newAnnouncements = data.announcements\r\n            } else {\r\n                newAnnouncements = [...announcements, ...data.announcements]\r\n            }\r\n            this.setState({\r\n                total: data.total,\r\n                announcements: newAnnouncements,\r\n                hasMore: true\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    onSearch = async (search) => {\r\n        let resetList = false;\r\n        if (search !== this.state.search) resetList = true;\r\n\r\n        this.setState({\r\n            search,\r\n        }, () => this.fetchAndSetAnnouncements(resetList))\r\n    }\r\n\r\n    handleInfiniteLoad = async () => {\r\n        // console.log('EXEC')\r\n        let { announcements, total, firstLoad } = this.state;\r\n\r\n        this.setState({ loading: true })\r\n        console.log('State: ')\r\n        console.log(this.state)\r\n        if (announcements.length === total && firstLoad === false) {\r\n            // message.warning('All announcements are loaded')\r\n            this.setState({\r\n                hasMore: false,\r\n                loading: false\r\n            })\r\n            return\r\n        }\r\n        console.log('EXEC')\r\n        await this.fetchAndSetAnnouncements();\r\n        this.setState({\r\n            loading: false,\r\n            firstLoad: false\r\n        })\r\n    }\r\n\r\n    toggleState = (name) => this.setState({ [name]: !this.state[name] })\r\n\r\n    render() {\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <div>\r\n\r\n                        <Modal\r\n                            title=\"Create New Announcement\"\r\n                            visible={this.state.createAnnouncement}\r\n                            destroyOnClose\r\n                            footer={null}\r\n                            style={{\r\n                                width: isMobile ? '90%' : 800\r\n                            }}\r\n                            //width={800}\r\n                            onCancel={() => this.toggleState('createAnnouncement')}\r\n                            onOk={() => this.toggleState('createAnnouncement')}>\r\n                            <CreateAnnouncement\r\n                                project={this.props.project}\r\n                                closeModal={() => this.toggleState('createAnnouncement')}\r\n                                updateList={() => this.fetchAndSetAnnouncements(true)}\r\n                            />\r\n                        </Modal>\r\n                        <div style={{\r\n                            marginBottom: 20,\r\n                            gap: 6,\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap'\r\n                        }}>\r\n                            <Button\r\n                                onClick={() => this.toggleState('createAnnouncement')}\r\n                                type='primary'>\r\n                                New Announcement\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => this.fetchAndSetAnnouncements(true)}\r\n                            >\r\n                                Refresh\r\n                            </Button>\r\n                            <Search placeholder=\"search\"\r\n                                onChange={(e) => this.onSearch(e.target.value)}\r\n                                onSearch={(search) => this.onSearch(search)} style={{ width: 200 }} />\r\n                        </div>\r\n\r\n                        <style>{`\r\n.bugg-list-item-button-321312312:hover {\r\n    background-color: rgb(0 0 0 / 5%);\r\n    cursor: pointer;\r\n}\r\n.bugg-list-item-button-321312312 {\r\n    background-color: white;\r\n}\r\n`}</style>\r\n                        <div style={{\r\n                            display: isMobile ? 'flex' : 'inline-flex',\r\n                            flexDirection: isMobile ? 'column' : 'unset',\r\n                            marginRight: isMobile ? 10 : 'unset'\r\n                        }}>\r\n                            <div\r\n                                style={{\r\n                                    borderColor: 'rgba(0,0,0,.2)',\r\n                                    // backgroundColor: 'rgba(0,0,0,.1)',\r\n                                    borderStyle: 'solid',\r\n                                    borderWidth: 1,\r\n                                    borderRadius: 5,\r\n                                    width: isMobile ? 'unset' : 360,\r\n                                    height: 600,\r\n                                    overflowY: 'auto',\r\n                                    overflowClipBox: 'content-box'\r\n                                }}\r\n                            >\r\n\r\n\r\n                                <InfiniteScroll\r\n                                    initialLoad={true}\r\n\r\n                                    // threshold={10}\r\n                                    pageStart={0}\r\n                                    loadMore={this.handleInfiniteLoad}\r\n                                    hasMore={!this.state.loading && this.state.hasMore}\r\n                                    useWindow={false}\r\n                                >\r\n                                    <List\r\n                                        itemLayout=\"horizontal\"\r\n                                        dataSource={this.state.announcements}\r\n                                        renderItem={(item) => (\r\n\r\n                                            <List.Item\r\n                                                key={item.id}\r\n                                                className=\"bugg-list-item-button-321312312\"\r\n                                                onClick={() => {\r\n                                                    this.setState({\r\n                                                        selectedAnnouncement: item\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <List.Item.Meta\r\n\r\n                                                    avatar={<Avatar\r\n                                                        style={{\r\n                                                            marginLeft: 20,\r\n                                                            marginTop: 9\r\n                                                        }}\r\n                                                    >{item.submitter.name.substring(0, 1).toUpperCase()}</Avatar>}\r\n                                                    title={<>\r\n                                                        <a\r\n                                                            style={{\r\n                                                                marginRight: 10\r\n                                                            }}\r\n                                                            onClick={e => e.preventDefault()}\r\n                                                            href=\"#\">\r\n\r\n                                                            {this.formatName(item.submitter.name)}\r\n                                                        </a>\r\n                                                        <Tag color='#f50'>OWNER</Tag>\r\n                                                        <span\r\n                                                            style={{\r\n                                                                float: 'right',\r\n                                                                marginRight: 20,\r\n                                                                opacity: .8\r\n                                                            }}>\r\n                                                            {moment(new Date(item.createdAt)).format('LT')}\r\n                                                        </span>\r\n                                                    </>}\r\n\r\n                                                    description={item.plainTextBody}\r\n                                                />\r\n                                            </List.Item>\r\n\r\n\r\n                                        )}\r\n                                    />\r\n                                    {this.state.loading && this.state.hasMore && (\r\n                                        <div className=\"demo-loading-container\">\r\n                                            <Spin />\r\n                                        </div>\r\n                                    )}\r\n                                </InfiniteScroll>\r\n                            </div>\r\n                            <style>{`\r\n                    .demo-loading-container {\r\n                        position: relative;\r\n                        bottom: 0px;\r\n                        background-color: white;\r\n                        width: 100%;\r\n                        text-align: center;\r\n                      }\r\n                    `}</style>\r\n                            {!isMobile &&\r\n                                <div style={{\r\n                                    flex: 1,\r\n                                    marginLeft: 20,\r\n                                    width: 600,\r\n                                    minHeight: 600\r\n                                }}>\r\n                                    {this.state.selectedAnnouncement === null ?\r\n                                        <Empty style={{\r\n                                            marginTop: 100\r\n                                        }}\r\n                                            description=\"Select an announcement to view\"\r\n                                        /> :\r\n                                        <Message announcement={this.state.selectedAnnouncement} />\r\n                                    }\r\n                                </div>}\r\n                            {isMobile &&\r\n                                <Drawer\r\n                                    visible={this.state.selectedAnnouncement !== null}\r\n                                    onClose={() => this.setState({ selectedAnnouncement: null })}\r\n                                    destroyOnClose\r\n                                    width=\"90%\"\r\n                                    title=\"View Announcement\"\r\n                                //drawerStyle={{ width: '100%' }}\r\n                                >\r\n                                    <Message announcement={this.state.selectedAnnouncement} />\r\n                                </Drawer>}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\n\r\nimport {\r\n    Calendar,\r\n    Button,\r\n\r\n    Space,\r\n    Modal,\r\n    Drawer\r\n} from 'antd';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport ViewBug from './../ProjectsTabs/ViewBug';\r\nimport MediaQuery from 'react-responsive';\r\nimport { logErrorMessage } from '../../../libraries/network-error-handling';\r\nimport { getDefaultHeader } from '../../config';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createNewEvent: false,\r\n            toggleDrawer: false,\r\n            bugs: [],\r\n            selectedBug: {},\r\n            selectedDate: moment()\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.fetchBugs()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.fetchBugs()\r\n        }\r\n    }\r\n\r\n    // retrives bugs assoiated with this project and sends them to this.state.bugs\r\n    fetchBugs = async () => {\r\n        if (!this.props.project.id) return;\r\n        try {\r\n            let { data } = await axios.get('/bug/all', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    projectId: this.props.project.id\r\n                }\r\n            })\r\n            //console.log(data)\r\n            this.setState({\r\n                bugs: data.bugs.map((item => {\r\n                    let date;\r\n                    if (item.dueDate) {\r\n                        date = moment(new Date(item.dueDate))\r\n                    }\r\n                    return {\r\n                        ...item,\r\n                        date\r\n                    }\r\n                }))\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.fetchBugs()\r\n        }\r\n    }\r\n\r\n    // Opens drawer and sets \"selectedBug\" in state\r\n    _onDateSelected = (date) => {\r\n        console.log(date)\r\n\r\n        this._toggleDrawerState()\r\n    }\r\n\r\n    _toggleDrawerState = () => {\r\n        this.setState({\r\n            toggleDrawer: !this.state.toggleDrawer\r\n        })\r\n    }\r\n\r\n    // toggle drawer state and refresh bug data\r\n    _onDrawerClose = () => {\r\n        this._toggleDrawerState()\r\n        this.fetchBugs()\r\n    }\r\n\r\n    _onBugSelect = () => {\r\n        const { selectedBug } = this.state;\r\n        this._toggleDrawerState();\r\n    }\r\n\r\n    getBugsDue = (value) => {\r\n        let year = value.year();\r\n        let day = value.dayOfYear()\r\n        let bugsDue = [];\r\n        let { bugs } = this.state\r\n\r\n        for (let i = 0; i < bugs.length; i++) {\r\n            let compareValue = bugs[i].date\r\n            if (!compareValue) continue;\r\n\r\n            if (year === compareValue.year() && day === compareValue.dayOfYear()) {\r\n                bugsDue.push(bugs[i])\r\n            }\r\n\r\n        }\r\n\r\n        return bugsDue\r\n    }\r\n\r\n    dateCellRender = (value) => {\r\n        const listData = this.getBugsDue(value);\r\n        return (\r\n            <ul\r\n\r\n                className=\"events\">\r\n                {listData.map(item => (\r\n                    <li\r\n                        onClick={() => this.setState({ selectedBug: item }, this._onBugSelect)}\r\n                        key={item.id}\r\n                        style={{\r\n                            backgroundColor: (() => {\r\n                                let { type } = item;\r\n                                if (type === 'error') {\r\n                                    return '#f5222d'\r\n                                }\r\n                                else if (type === 'warning') {\r\n                                    return '#d4b106'\r\n                                } else if (type === 'success') {\r\n                                    return '#52c41a'\r\n                                } else {\r\n                                    return '#13c2c2'\r\n                                }\r\n                            })(),\r\n                            marginBottom: 5,\r\n                            borderRadius: 5,\r\n                            paddingLeft: 5,\r\n                            color: 'white'\r\n                        }}\r\n                    >\r\n\r\n                        {item.title}\r\n                        {/* <Badge status={item.type} text={item.content} /> */}\r\n\r\n\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <div>\r\n                        <div style={{\r\n                            marginRight: isMobile ? 10 : 64\r\n                        }}>\r\n                            <style>{`\r\n                    .events {\r\n                        margin: 0;\r\n                        padding: 0;\r\n                        list-style: none;\r\n                      }\r\n                      .events .ant-badge-status {\r\n                        width: 100%;\r\n                        overflow: hidden;\r\n                        font-size: 12px;\r\n                        white-space: nowrap;\r\n                        text-overflow: ellipsis;\r\n                      }\r\n                      .notes-month {\r\n                        font-size: 28px;\r\n                        text-align: center;\r\n                      }\r\n                      .notes-month section {\r\n                        font-size: 28px;\r\n                      }\r\n                    `}</style>\r\n                            <Space>\r\n                                {/* <Button\r\n                            \r\n                            onClick={() => this.setState({ createNewEvent: !this.state.createNewEvent })}>\r\n                            Add Event\r\n                        </Button> */}\r\n                                <Button\r\n                                    type='primary'\r\n                                    onClick={() => this.setState({ selectedDate: moment() })}\r\n                                >\r\n                                    Today\r\n                                </Button>\r\n                            </Space>\r\n                            <Calendar\r\n                                value={this.state.selectedDate}\r\n                                onSelect={(date) => this.setState({ selectedDate: date })}\r\n                                dateCellRender={this.dateCellRender}\r\n                            />\r\n                            <Modal\r\n                                visible={this.state.createNewEvent}\r\n                                onOk={() => this.setState({ createNewEvent: !this.state.createNewEvent })}\r\n                                onCancel={() => this.setState({ createNewEvent: !this.state.createNewEvent })}\r\n                                title=\"Create New Event\"\r\n                            >\r\n\r\n                            </Modal>\r\n                            <Drawer\r\n                                width={800}\r\n                                title=\"View Date\"\r\n                                placement=\"right\"\r\n                                closable={true}\r\n                                onClose={() => this.setState({ toggleDrawer: false })}\r\n                                visible={this.state.toggleDrawer}\r\n                            >\r\n                                hey\r\n                            </Drawer>\r\n\r\n                            <Drawer\r\n                                width={isMobile ? '100%' : 800}\r\n                                title={this.state.selectedBug.title}\r\n                                placement=\"right\"\r\n                                closable={true}\r\n                                onClose={this._onDrawerClose}\r\n                                visible={this.state.toggleDrawer}\r\n                                destroyOnClose\r\n                            >\r\n                                <ViewBug bug={this.state.selectedBug} />\r\n                            </Drawer>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n    Input,\r\n    Button,\r\n    Upload,\r\n    Space,\r\n    message,\r\n    List,\r\n    Popconfirm,\r\n    notification\r\n} from 'antd';\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport config, { baseUrl, getDefaultHeader } from \"../../../config\"\r\nimport { getErrorMessage, logErrorMessage } from \"../../../../libraries/network-error-handling\";\r\nimport bugg from \"./../../../../libraries/bugg\";\r\n\r\nfunction General(props) {\r\n\r\n    const initializeComponent = () => {\r\n\r\n        setProject(props.project);\r\n        setTitle(props.project.title);\r\n        setDescription(props.project.description)\r\n        try {\r\n            setImageUri('/icon/' + props.project.icon[0].id)\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n        const retreiveProject = async () => {\r\n            try {\r\n                let { data } = await axios.get('/project/find', {\r\n                    headers: getDefaultHeader(),\r\n                    params: {\r\n                        projectId: props.project.id\r\n                    }\r\n                });\r\n\r\n                if (data.project) {\r\n                    console.log(data.project)\r\n                    setProject(data.project)\r\n                    setImageUri(baseUrl + '/icon/' + data.project.icon[0].id)\r\n                    setTitle(data.project.title);\r\n                    setDescription(data.project.description)\r\n                }\r\n            } catch (e) {\r\n                logErrorMessage(e)\r\n            }\r\n        }\r\n\r\n        retreiveProject()\r\n\r\n    }\r\n    useEffect(initializeComponent, [props.project])\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [imageUri, setImageUri] = useState('');\r\n    const [project, setProject] = useState({});\r\n\r\n\r\n\r\n    // upload image and set imageUri\r\n    const beforeUpload = async (file) => {\r\n        let formData = new FormData();\r\n        formData.append('icon', file);\r\n        try {\r\n            let { data } = await axios.post('/icon/upload', formData, {\r\n                headers: {\r\n                    ...(getDefaultHeader()),\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n                params: {\r\n                    projectId: project.id\r\n                }\r\n            });\r\n            console.log(data)\r\n            let newImageUri = baseUrl + '/icon/' + data.uploadedFiles[0].id;\r\n            // TODO: Update project URI\r\n            props.updateProject()\r\n            setImageUri(newImageUri)\r\n            message.success('Icon was updated')\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    const updateProject = async (field) => {\r\n        let value;\r\n        if (field === 'title') {\r\n            value = title;\r\n        } else if (field === 'description') {\r\n            value = description;\r\n        }\r\n        try {\r\n            let { data } = await axios.put('/project/' + project.id, {\r\n                [field]: value\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n\r\n            let newProject = data.project;\r\n            setProject(newProject)\r\n\r\n            message.success(`${field} was updated to \"${value}\"`)\r\n            props.updateProject()\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    let history = useHistory();\r\n    const deleteProject = async () => {\r\n        const projectId = props.project.id;\r\n        try {\r\n            await axios.delete(config.baseUrl + '/project/' + projectId, {\r\n                headers: config.getDefaultHeader()\r\n            });\r\n            notification.success({\r\n                message: \"Project was deleted\"\r\n            })\r\n            props.updateProjectOnNavigation()\r\n            history.push('/dashboard')\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(initializeComponent, [])\r\n\r\n    const leaveProject = async () => {\r\n        let projectId = props.match.params.projectId;\r\n        try {\r\n\r\n            await bugg.Project.leaveProject(projectId);\r\n            props.history.push('/dashboard')\r\n            message.success('Left project')\r\n        } catch (e) {\r\n            message.error('Could not leave project: ' + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n\r\n    const settings = [\r\n        {\r\n            title: 'Title',\r\n            reactNode: (<Space  >\r\n                {\r\n                    title !== project.title ?\r\n                        <Button\r\n                            onClick={() => updateProject('title')}\r\n                            type='primary'>\r\n                            Update\r\n                        </Button> : null}\r\n                <Input\r\n                    value={title}\r\n                    onPressEnter={() => {\r\n                        if (title !== project.title) updateProject('title')\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTitle(e.target.value)\r\n                    }}\r\n                    type=\"text\" />\r\n\r\n            </Space>)\r\n        },\r\n        {\r\n            title: 'Description',\r\n            reactNode: (\r\n                <Space >\r\n                    {\r\n                        description !== project.description ?\r\n                            <Button\r\n                                onClick={() => updateProject('description')}\r\n                                type='primary'>\r\n                                Update\r\n                            </Button> : null}\r\n                    <Input\r\n                        value={description}\r\n                        onPressEnter={() => {\r\n                            if (description !== project.description) updateProject('description')\r\n                        }}\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        o\r\n                        type=\"text\" />\r\n\r\n                </Space>\r\n            )\r\n        },\r\n        {\r\n            title: 'Project Icon',\r\n            reactNode: (\r\n                <div>\r\n                    <Upload\r\n                        name=\"avatar\"\r\n                        listType=\"picture-card\"\r\n                        accept='image/*'\r\n                        showUploadList={false}\r\n                        // action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                        beforeUpload={beforeUpload}\r\n                    // onChange={this.handleChange}\r\n                    >\r\n                        {\r\n                            imageUri === '' ?\r\n                                \"Upload Icon\" :\r\n                                <div style={{\r\n                                    width: '80%',\r\n                                    height: '80%',\r\n                                    backgroundImage: 'url(' + imageUri + ')',\r\n                                    backgroundSize: 'cover',\r\n                                    backgroundPosition: 'center'\r\n                                }}\r\n                                />\r\n\r\n                        }\r\n\r\n                    </Upload>\r\n                </div>\r\n\r\n            )\r\n        },\r\n        {\r\n            title: 'Leave Project?',\r\n            reactNode: (\r\n                <Popconfirm\r\n                    title=\"Are you sure?\"\r\n                    onConfirm={leaveProject}\r\n                >\r\n                    <Button danger>Leave</Button>\r\n                </Popconfirm>\r\n            )\r\n        },\r\n        {\r\n            title: 'Delete Project?',\r\n            reactNode: (\r\n                <Popconfirm\r\n                    title=\"Are you sure?\"\r\n                    onConfirm={deleteProject}\r\n                >\r\n                    <Button danger>Delete</Button>\r\n                </Popconfirm>\r\n            )\r\n        }\r\n    ]\r\n\r\n\r\n    return (<div style={{ width: '100%' }}>\r\n        <List\r\n            style={{\r\n                width: '100%',\r\n                maxWidth: 600\r\n            }}\r\n            dataSource={settings}\r\n            bordered\r\n\r\n            renderItem={(item) => <List.Item\r\n                key={item.title}\r\n                extra={[item.reactNode]}\r\n            >\r\n                {item.title}\r\n            </List.Item>}\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n    </div >\r\n    )\r\n}\r\n\r\nexport default withRouter(General)","import { useState, useEffect } from \"react\";\r\nimport { Modal, Form, Input, Switch, Select, Space, Button, message } from \"antd\";\r\nimport axios\r\n    from \"axios\";\r\n\r\nimport { CirclePicker } from 'react-color';\r\n\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\n\r\nconst PERMISSIONS = {\r\n    ALL: 'ALL',\r\n    MODIFY_GENERAL: 'MODIFY_GENERAL',\r\n    MODIFY_MEMBERS: 'MODIFY_MEMBERS',\r\n    MODIFY_BUGS: 'MODIFY_BUGS',\r\n    MODIFY_ANNOUNCEMENTS: 'MODIFY_ANNOUNCEMENTS'\r\n}\r\n\r\n// const PERMISSIONS_ARRAY = [\r\n//     'ALL',\r\n//     'MODIFY_GENERAL',\r\n//     'MODIFY_MEMBERS',\r\n//     'MODIFY_BUGS',\r\n//     'MODIFY_ANNOUNCEMENTS'\r\n// ]\r\n\r\nconst { Option } = Select;\r\n\r\nconst ModifyRole = (props) => {\r\n    useEffect(() => {\r\n        if (props.role) {\r\n            setMembers(props.role.users)\r\n            setSelectedMembers(props.role.users.map((item) => item.id))\r\n            if (props.role.color) setColor(props.role.color)\r\n        }\r\n    }, [props.role]);\r\n\r\n    const [members, setMembers] = useState([]);\r\n    const [selectedMembers, setSelectedMembers] = useState([])\r\n    const [search, setSearch] = useState('');\r\n    const { toggleUpdateRoleModal, fetchRoles } = props;\r\n    const [color, setColor] = useState('#f44336')\r\n\r\n\r\n    // TODO: only search for users apart of the project\r\n    const handleUserSearch = async () => {\r\n        try {\r\n            let { data } = await axios.get('/user/search', {\r\n                params: {\r\n                    query: search,\r\n                    projectId: props.match.params.projectId,\r\n                    isIn: true\r\n                },\r\n                headers: getDefaultHeader()\r\n            })\r\n            //console.log(results.data)\r\n            let newMembers = [];\r\n            let users = data.results;\r\n            for (let i = 0; i < users.length; i++) {\r\n                newMembers.push({\r\n                    key: users[i].id,\r\n                    name: users[i].name,\r\n                    email: users[i].email,\r\n                    id: users[i].id\r\n                })\r\n            }\r\n            setMembers(newMembers)\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    const updateRole = async (data) => {\r\n        let title = data.title;\r\n        let permissions = [];\r\n\r\n        // default checked is undefined, so normalize to true\r\n        let getValue = (value) => {\r\n            if (value || value === undefined) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n\r\n        // construct permission array\r\n        let modAnnouncements = getValue(data[PERMISSIONS.MODIFY_ANNOUNCEMENTS])\r\n        let modBugs = getValue(data[PERMISSIONS.MODIFY_BUGS])\r\n        let modGen = getValue(data[PERMISSIONS.MODIFY_GENERAL])\r\n        let modMembers = getValue(data[PERMISSIONS.MODIFY_MEMBERS])\r\n\r\n        if (modAnnouncements && modBugs\r\n            && modGen && modMembers) {\r\n            permissions.push(PERMISSIONS.ALL)\r\n        } else {\r\n            if (modAnnouncements) permissions.push(PERMISSIONS.MODIFY_ANNOUNCEMENTS);\r\n            if (modBugs) permissions.push(PERMISSIONS.MODIFY_BUGS);\r\n            if (modGen) permissions.push(PERMISSIONS.MODIFY_GENERAL);\r\n            if (modMembers) permissions.push(PERMISSIONS.MODIFY_MEMBERS);\r\n        }\r\n\r\n        try {\r\n            await axios.put('/role', {\r\n                roleId: props.role.id,\r\n                title,\r\n                color,\r\n                permissions: permissions.join(','),\r\n                users: selectedMembers.join(',')\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            toggleUpdateRoleModal();\r\n            fetchRoles();\r\n            message.success(\"Role updated\")\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n            message.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    const getInitialValue = (field) => {\r\n        if (field === 'title') return props.role.title\r\n\r\n\r\n        if (props.role.permissions === 'ALL') {\r\n\r\n            return true\r\n        };\r\n\r\n        const permissions = props.role.permissions.split(',');\r\n\r\n        return permissions.includes(field)\r\n    }\r\n    console.log(props.role)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal title=\"Update Role\"\r\n                visible={props.visible}\r\n                // onOk={updateRole}\r\n                footer={null}\r\n                destroyOnClose\r\n                onCancel={toggleUpdateRoleModal}\r\n            >\r\n                {\r\n                    props.role !== null ?\r\n                        <Form\r\n                            layout='vertical'\r\n                            onFinish={updateRole}\r\n\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                                initialValue={getInitialValue('title')}\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please add a title',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    type=\"text\" />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Members\"\r\n                                name=\"members\"\r\n                                initialValue={selectedMembers}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    mode='multiple'\r\n                                    // value={selectedMembers}\r\n                                    placeholder={\"search...\"}\r\n                                    // style={this.props.style}\r\n                                    // defaultActiveFirstOption={false}\r\n                                    // showArrow={false}\r\n                                    filterOption={false}\r\n                                    onSearch={(value) => {\r\n                                        setSearch(value);\r\n                                        handleUserSearch();\r\n                                    }}\r\n                                    onChange={setSelectedMembers}\r\n                                // notFoundContent={\"\"}\r\n                                >\r\n                                    {/* <Option key={'1'}>{query}</Option> */}\r\n                                    {\r\n                                        members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)\r\n                                    }\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Color\"\r\n                                name=\"color\"\r\n                            >\r\n                                <CirclePicker\r\n                                    color={color}\r\n                                    onChangeComplete={(value) => setColor(value.hex)}\r\n                                />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Can modify bugs\"\r\n                                name={PERMISSIONS.MODIFY_BUGS}\r\n                                initialValue={getInitialValue(PERMISSIONS.MODIFY_BUGS)}\r\n                                valuePropName=\"checked\">\r\n                                <Switch />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Can modify announcements\" name={PERMISSIONS.MODIFY_ANNOUNCEMENTS}\r\n                                valuePropName=\"checked\"\r\n                                initialValue={getInitialValue(PERMISSIONS.MODIFY_ANNOUNCEMENTS)}\r\n                            >\r\n                                <Switch />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Can modify project\" name={PERMISSIONS.MODIFY_GENERAL}\r\n                                valuePropName=\"checked\"\r\n                                initialValue={getInitialValue(PERMISSIONS.MODIFY_GENERAL)}\r\n                            >\r\n                                <Switch />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Can modify members\"\r\n                                valuePropName=\"checked\"\r\n                                name={PERMISSIONS.MODIFY_MEMBERS}\r\n                                initialValue={getInitialValue(PERMISSIONS.MODIFY_MEMBERS)}\r\n                            >\r\n                                <Switch />\r\n                            </Form.Item>\r\n                            <Space style={{\r\n                                width: '100%',\r\n                                marginTop: 20,\r\n                                display: 'inline-flex',\r\n                                justifyContent: 'flex-end'\r\n                            }}>\r\n                                <Button onClick={toggleUpdateRoleModal}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    htmlType='submit'\r\n                                    type='primary'>\r\n                                    Update\r\n                                </Button>\r\n                            </Space>\r\n                        </Form> : null}\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(ModifyRole);","import react from \"react\";\r\nimport {\r\n    Button,\r\n\r\n    Modal,\r\n    Space,\r\n\r\n    message,\r\n    Select,\r\n    Form,\r\n    Input,\r\n    Switch,\r\n\r\n    List,\r\n    Popconfirm, Tag\r\n} from 'antd';\r\nimport axios from \"axios\";\r\nimport ModifyRole from './../../../../components/ModifyRole'\r\nimport { CirclePicker } from 'react-color'\r\nimport { getDefaultHeader } from \"../../../config\"\r\nimport { getErrorMessage, logErrorMessage } from \"../../../../libraries/network-error-handling\";\r\n\r\nconst PERMISSIONS = {\r\n    ALL: 'ALL',\r\n    MODIFY_GENERAL: 'MODIFY_GENERAL',\r\n    MODIFY_MEMBERS: 'MODIFY_MEMBERS',\r\n    MODIFY_BUGS: 'MODIFY_BUGS',\r\n    MODIFY_ANNOUNCEMENTS: 'MODIFY_ANNOUNCEMENTS'\r\n}\r\n\r\nconst { Option } = Select;\r\n\r\nexport default class Roles extends react.Component {\r\n    state = {\r\n        roles: [],\r\n        selectedRole: null,\r\n        isModalVisible: false,\r\n        members: [],\r\n        selectedMembers: [],\r\n        search: '',\r\n        current: 'display',\r\n        updateRoleModalVisible: false,\r\n        color: '#f44336'\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.fetchRoles()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.fetchRoles()\r\n        }\r\n    }\r\n\r\n    // TODO: only search for users apart of the project\r\n    _handleUserSearch = async () => {\r\n        const { search } = this.state;\r\n        try {\r\n            let { data } = await axios.get('/user/search', {\r\n                params: {\r\n                    query: search,\r\n                    projectId: this.props.match.params.projectId,\r\n                    isIn: true\r\n                },\r\n                headers: getDefaultHeader()\r\n            })\r\n            //console.log(results.data)\r\n            let newMembers = [];\r\n            let users = data.results;\r\n            for (let i = 0; i < users.length; i++) {\r\n                newMembers.push({\r\n                    key: users[i].id,\r\n                    name: users[i].name,\r\n                    email: users[i].email,\r\n                    id: users[i].id\r\n                })\r\n            }\r\n            this.setState({\r\n                members: newMembers\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n\r\n            return\r\n        }\r\n    }\r\n\r\n    _handleSelectUser = (val) => {\r\n        this.setState({\r\n            selectedMembers: val\r\n        })\r\n    }\r\n\r\n    createRole = async (data) => {\r\n        console.log(data)\r\n\r\n        let title = data.title;\r\n        let permissions = [];\r\n\r\n        // default checked is undefined, so normalize to true\r\n        let getValue = (value) => {\r\n            if (value || value === undefined) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n\r\n        // construct permission array\r\n        let modAnnouncements = getValue(data[PERMISSIONS.MODIFY_ANNOUNCEMENTS])\r\n        let modBugs = getValue(data[PERMISSIONS.MODIFY_BUGS])\r\n        let modGen = getValue(data[PERMISSIONS.MODIFY_GENERAL])\r\n        let modMembers = getValue(data[PERMISSIONS.MODIFY_MEMBERS])\r\n\r\n        if (modAnnouncements && modBugs\r\n            && modGen && modMembers) {\r\n            permissions.push(PERMISSIONS.ALL)\r\n        } else {\r\n            if (modAnnouncements) permissions.push(PERMISSIONS.MODIFY_ANNOUNCEMENTS);\r\n            if (modBugs) permissions.push(PERMISSIONS.MODIFY_BUGS);\r\n            if (modGen) permissions.push(PERMISSIONS.MODIFY_GENERAL);\r\n            if (modMembers) permissions.push(PERMISSIONS.MODIFY_MEMBERS);\r\n        }\r\n\r\n        try {\r\n            await axios.post('/role', {\r\n                projectId: this.props.project.id,\r\n                title,\r\n                permissions: permissions.join(','),\r\n                color: this.state.color,\r\n                users: this.state.selectedMembers.join(',')\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            this.setState({\r\n\r\n                isModalVisible: false\r\n            })\r\n            message.success(\"Role created\")\r\n            this.fetchRoles()\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n\r\n    fetchRoles = async () => {\r\n        try {\r\n            let { data: { roles } } = await axios.get('/role/all/' + this.props.project.id, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            console.log(\"Roles on fetch: \")\r\n            console.log(roles)\r\n            this.setState({\r\n                roles\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    toggleUpdateRoleModal = () => {\r\n        this.setState({\r\n            updateRoleModalVisible: !this.state.updateRoleModalVisible\r\n        })\r\n    }\r\n    handleChangeComplete = (color) => {\r\n        this.setState({ color: color.hex });\r\n    };\r\n\r\n    deleteRole = async (roleId) => {\r\n        try {\r\n            await axios.delete('/role/' + roleId, {\r\n                headers: getDefaultHeader()\r\n            });\r\n            this.fetchRoles()\r\n            message.success('role was deleted')\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isMobile } = this.props;\r\n\r\n        return (<>\r\n            <div style={{\r\n                maxWidth: isMobile ? 'unset' : 600 //500\r\n            }}>\r\n                <div style={{\r\n                    display: 'inline-flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    width: '100%',\r\n                    marginBottom: 20\r\n                }}>\r\n                    <h3 style={{ margin: 0 }}>\r\n                        All Roles\r\n                    </h3>\r\n                    <Button\r\n                        onClick={() => this.setState({ isModalVisible: true })}\r\n                        type='primary'>\r\n                        Create New\r\n                    </Button>\r\n                </div>\r\n\r\n                <List\r\n\r\n                    bordered\r\n                    dataSource={this.state.roles}\r\n                    renderItem={item => (\r\n                        <List.Item\r\n                            key={item.id}\r\n                            extra={\r\n                                <Space>\r\n                                    <Button\r\n\r\n                                        onClick={(e) => {\r\n                                            this.setState({\r\n                                                selectedRole: item,\r\n                                                updateRoleModalVisible: true\r\n                                            })\r\n                                            e.preventDefault()\r\n                                        }}>\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Popconfirm\r\n                                        title=\"Are you sure?\"\r\n                                        onConfirm={() => this.deleteRole(item.id)}\r\n                                    >\r\n\r\n                                        <Button\r\n                                            danger\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </Popconfirm>\r\n                                </Space>\r\n\r\n                            }\r\n                        >\r\n                            <Tag color={item.color}>{item.title} </Tag>\r\n\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <Modal title=\"Create Role\"\r\n                visible={this.state.isModalVisible}\r\n                onOk={this.createRole}\r\n                footer={null}\r\n                destroyOnClose\r\n                onCancel={() => this.setState({ isModalVisible: false })}\r\n            >\r\n                <Form\r\n                    layout='vertical'\r\n                    onFinish={this.createRole}\r\n\r\n                >\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        // initialValue=\"hey\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please add a title',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input\r\n\r\n                            type=\"text\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Members\"\r\n                        name=\"members\"\r\n                    >\r\n                        <Select\r\n                            showSearch\r\n                            mode='multiple'\r\n                            placeholder={\"search...\"}\r\n                            filterOption={false}\r\n                            onSearch={(value) => this.setState({ search: value }, this._handleUserSearch)}\r\n                            onChange={this._handleSelectUser}\r\n                        // notFoundContent={\"\"}\r\n                        >\r\n                            {\r\n                                this.state.members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Color\"\r\n                        name=\"color\"\r\n                    >\r\n                        <CirclePicker\r\n                            color={this.state.color}\r\n                            onChangeComplete={this.handleChangeComplete}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Can modify bugs\"\r\n                        name={PERMISSIONS.MODIFY_BUGS}\r\n\r\n                        valuePropName=\"checked\">\r\n                        <Switch\r\n\r\n                            defaultChecked={true} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Can modify announcements\" name={PERMISSIONS.MODIFY_ANNOUNCEMENTS}\r\n                        valuePropName=\"checked\"\r\n                    >\r\n                        <Switch defaultChecked />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Can modify project\" name={PERMISSIONS.MODIFY_GENERAL}\r\n                        valuePropName=\"checked\"\r\n                    >\r\n                        <Switch defaultChecked />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Can modify members\"\r\n                        valuePropName=\"checked\"\r\n                        name={PERMISSIONS.MODIFY_MEMBERS}>\r\n                        <Switch defaultChecked />\r\n                    </Form.Item>\r\n                    <Space style={{\r\n                        width: '100%',\r\n                        marginTop: 20,\r\n                        display: 'inline-flex',\r\n                        justifyContent: 'flex-end'\r\n                    }}>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                isModalVisible: false\r\n                            })\r\n                        }}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            htmlType='submit'\r\n                            type='primary'>\r\n                            Create\r\n                        </Button>\r\n                    </Space>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <ModifyRole\r\n                visible={this.state.updateRoleModalVisible}\r\n                toggleUpdateRoleModal={this.toggleUpdateRoleModal}\r\n                role={this.state.selectedRole}\r\n                fetchRoles={this.fetchRoles}\r\n            />\r\n        </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import react from \"react\";\r\nimport { List, message, Switch } from 'antd'\r\nimport axios from \"axios\";\r\nimport { getDefaultHeader } from \"../../../config\"\r\nimport { getErrorMessage, logErrorMessage } from \"../../../../libraries/network-error-handling\";\r\n\r\n\r\nexport default class Notifications extends react.Component {\r\n    state = {\r\n        enableNotifications: true\r\n    }\r\n    TOKEN = window.localStorage.getItem('token')\r\n\r\n    componentDidMount() {\r\n        this.getCurrentSetting()\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.getCurrentSetting()\r\n        }\r\n    }\r\n\r\n    getCurrentSetting = async () => {\r\n        try {\r\n            const { data } = await axios.get('/notification-setting/' + this.props.project.id, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            this.setState({\r\n                enableNotifications: data.notificationSetting.recieveNotifications\r\n            })\r\n\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    setCurrentSetting = async (checked) => {\r\n        try {\r\n            await axios.put('/notification-setting/' + this.props.project.id, {\r\n                recieveNotifications: checked\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            });\r\n            message.success('Setting updated!')\r\n            this.setState({ enableNotifications: checked })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { isMobile } = this.props\r\n        return <div style={{\r\n            width: isMobile ? 'unset' : 500 //500\r\n        }}>\r\n            <List\r\n                // header={<div>Header</div>}\r\n                // footer={<div>Footer</div>}\r\n                bordered\r\n                dataSource={[0]}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        key={item}\r\n                        extra={\r\n                            <Switch\r\n                                onChange={this.setCurrentSetting}\r\n                                checked={this.state.enableNotifications} />\r\n                        }\r\n                    >\r\n                        Enable notifications for this project?\r\n\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    }\r\n}","import react from \"react\";\r\n\r\n\r\n\r\nexport default class Members extends react.Component {\r\n\r\n    render() {\r\n        return \"members\"\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { List, Avatar } from 'antd';\r\n\r\nimport General from './SettingsComponents/General';\r\nimport Roles from './SettingsComponents/Roles';\r\nimport Notifications from './SettingsComponents/Notifications';\r\nimport Members from './SettingsComponents/Members'\r\nimport MediaQuery from 'react-responsive'\r\n\r\nconst data = [\r\n    'General',\r\n    'Roles',\r\n    'Notifications',\r\n    // 'Members',\r\n];\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthed: false,\r\n            selectedSetting: 'general',\r\n\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n\r\n\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: isMobile ? 'column' : 'row',\r\n                        marginTop: 10,\r\n                        marginRight: isMobile ? 10 : 64,\r\n                        gap: 20\r\n                        // width: '100%'\r\n                    }}>\r\n                        <style>{`\r\n.bugg-list-item-button:hover {\r\n    background-color: rgb(0 0 0 / 5%);\r\n    cursor: pointer;\r\n}\r\n.bugg-list-item-button {\r\n    background-color: white;\r\n}\r\n`}</style>\r\n                        <div>\r\n                            <List\r\n                                // header={<div>Header</div>}\r\n                                // footer={<div>Footer</div>}\r\n                                bordered\r\n                                dataSource={data}\r\n                                style={{\r\n                                    width: isMobile ? 'unset' : 220,\r\n                                    // marginBottom: \r\n                                    //  height: 229 - (229 / 4)\r\n                                }}\r\n                                renderItem={item => {\r\n                                    let str = item.toLowerCase().split(' ').join('-');\r\n                                    return (\r\n                                        <List.Item\r\n                                            key={str}\r\n                                            className=\"bugg-list-item-button\"\r\n                                            onClick={() => {\r\n                                                this.setState({\r\n                                                    selectedSetting: str\r\n                                                })\r\n                                            }}\r\n                                            style={{\r\n                                                color: (this.state.selectedSetting === str ? '#0094f7' : 'black')\r\n                                            }}\r\n                                        >\r\n                                            <Avatar style={{\r\n                                                marginRight: 10\r\n                                            }}>{item.substring(0, 1).toLocaleUpperCase()}</Avatar> {item}\r\n                                        </List.Item>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </div>\r\n\r\n                        {\r\n                            // Create components\r\n                        }\r\n                        <div style={{\r\n                            flex: 1,\r\n\r\n                        }}>\r\n                            {\r\n                                (() => {\r\n                                    switch (this.state.selectedSetting) {\r\n                                        case data[0].toLowerCase().split(' ').join('-'):\r\n                                            return <General\r\n                                                project={this.props.project}\r\n                                                updateProject={this.props.updateProject}\r\n                                                updateProjectOnNavigation={this.props.updateProjectOnNavigation}\r\n                                            />\r\n                                        case data[1].toLowerCase().split(' ').join('-'):\r\n                                            return <Roles isMobile={isMobile} project={this.props.project} />\r\n                                        case data[2].toLowerCase().split(' ').join('-'):\r\n                                            return <Notifications isMobile={isMobile} project={this.props.project} />\r\n                                        case data[3].toLowerCase().split(' ').join('-'):\r\n                                            return <Members project={this.props.project} />\r\n                                        default:\r\n                                            return 'no tab selected'\r\n                                    }\r\n\r\n                                })()\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {\r\n    Popconfirm, List,\r\n    Input,\r\n    Avatar, Button, Space, Modal, Select, message, Tag\r\n} from 'antd';\r\nimport { withRouter } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { getMe } from '../../../libraries/bugg';\r\nimport { getErrorMessage, logErrorMessage } from '../../../libraries/network-error-handling';\r\nimport { getDefaultHeader } from '../../config';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\nfunction validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggleAddMember: false,\r\n            page: 1,\r\n            pageSize: 50,\r\n            total: 0,\r\n            search: '',\r\n            members: [],\r\n            membersToAdd: [],\r\n            query: '',\r\n            selectedMembersToAdd: [],\r\n            confirmVisible: false,\r\n            deleteButtonLoading: false\r\n        };\r\n\r\n    }\r\n    TOKEN = window.localStorage.getItem('token')\r\n    componentDidMount() {\r\n        this.fetchMembers()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.project.id !== this.props.project.id) {\r\n            this.fetchMembers()\r\n        }\r\n    }\r\n\r\n    fetchMembers = async () => {\r\n        var { page, pageSize, search } = this.state;\r\n\r\n        try {\r\n            const { data } = await axios.get('/project/users/' + this.props.project.id, {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    skip: (page - 1) * pageSize,\r\n                    limit: pageSize,\r\n                    search\r\n                }\r\n            })\r\n\r\n            this.setState({\r\n                members: data.members,\r\n                total: data.total\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n\r\n    updateSearch = (search) => {\r\n        this.setState({\r\n            search: search,\r\n            page: 1\r\n        }, this.fetchMembers)\r\n    }\r\n\r\n    onChangePagination = (page, pageSize) => {\r\n        this.setState({\r\n            page, pageSize\r\n        }, this.fetchMembers)\r\n    }\r\n\r\n\r\n    toggleAddMember = () => this.setState({ toggleAddMember: !this.state.toggleAddMember })\r\n    updateMembersToAdd = (val) => this.setState({ selectedMembersToAdd: val })\r\n\r\n\r\n    addMembers = async () => {\r\n        const { selectedMembersToAdd } = this.state;\r\n\r\n        try {\r\n            await axios.post('/project/member', {\r\n                userEmails: selectedMembersToAdd,\r\n                projectId: this.props.project.id\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            });\r\n            message.success(\"users invited!\")\r\n            this.toggleAddMember()\r\n            this.fetchMembers()\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    // sets members users with that match search\r\n    // inserts email that does not match in server\r\n    searchMembers = async () => {\r\n        const { query } = this.state;\r\n        try {\r\n            let results = await axios.get('/user/search', {\r\n                params: {\r\n                    query: query,\r\n                    projectId: this.props.match.params.projectId,\r\n                    isIn: false\r\n                },\r\n                headers: getDefaultHeader()\r\n            })\r\n            let members = results.data.results.map((item) => ({\r\n                key: item.email,\r\n                name: item.name,\r\n                email: item.email,\r\n                id: item.id,\r\n                isInServer: true\r\n            }));\r\n\r\n            if (validateEmail(query)) {\r\n                members = [{\r\n                    isInServer: false,\r\n                    email: query,\r\n                    key: query\r\n                }, ...members];\r\n            }\r\n\r\n            this.setState({\r\n                membersToAdd: members\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    removeMember = async (userId) => {\r\n\r\n        try {\r\n            await axios.delete('/project/member', {\r\n                headers: getDefaultHeader(),\r\n                data: {\r\n                    projectId: this.props.project.id,\r\n                    userId\r\n                }\r\n            })\r\n            this.fetchMembers()\r\n            this.setState({\r\n                confirmVisible: false,\r\n                deleteButtonLoading: false\r\n            })\r\n\r\n\r\n            try {\r\n                let user = await getMe();\r\n                if (user.id === userId) {\r\n                    this.props.updateProject()\r\n                    this.props.history.push('/dashboard')\r\n                }\r\n\r\n            } catch (e) {\r\n                logErrorMessage(e)\r\n            }\r\n\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isMobile } = this.props;\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n\r\n                    marginRight: isMobile ? 10 : 64\r\n                }}\r\n            >\r\n                <div style={{\r\n                    marginBottom: 20,\r\n                    gap: 6,\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap'\r\n                }}>\r\n                    <Search\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"search\"\r\n                        value={this.state.search}\r\n                        onChange={(e) => this.updateSearch(e.target.value)}\r\n                        onSearch={this.updateSearch} />\r\n                    <Button\r\n                        onClick={this.toggleAddMember}\r\n                        type='primary'>\r\n                        Add New Member\r\n                    </Button>\r\n                </div>\r\n\r\n                <List\r\n\r\n                    pagination={{\r\n                        current: this.state.page,\r\n                        total: this.state.total,\r\n                        pageSize: this.state.pageSize,\r\n                        onChange: this.onChangePagination\r\n                    }}\r\n                    bordered\r\n                    dataSource={this.state.members}\r\n                    style={{\r\n                        maxWidth: 900\r\n                    }}\r\n                    renderItem={item => (\r\n                        <List.Item\r\n                            key={item.id}\r\n                            actions={[\r\n                                (!item.isOwner && <Popconfirm\r\n                                    title=\"Are you sure?\"\r\n                                    // visible={this.state.confirmVisible}\r\n                                    okButtonProps={{ loading: this.state.deleteButtonLoading }}\r\n                                    onConfirm={() => this.removeMember(item.id)}\r\n                                >\r\n                                    <Button\r\n                                        // onClick={() => this.setState({ confirmVisible: true })}\r\n\r\n                                        {\r\n                                        ...(isMobile ? {\r\n                                            icon: <DeleteOutlined />\r\n                                        } : {})\r\n                                        }\r\n                                        danger>{isMobile ? '' : 'Remove'}</Button>\r\n                                </Popconfirm>)\r\n\r\n                            ]}\r\n                        >\r\n                            <Avatar style={{ marginRight: 10 }}>{item.name.substring(0, 1)}</Avatar>\r\n                            {`${item.name.split(' ')[0]} ${(item.name.split(' ')[1] ? item.name.split(' ')[1].substring(0, 1).toUpperCase() + '.' : '')} (${item.email})`}\r\n                            {\r\n                                item.isOwner && <Tag color='red' style={{ marginLeft: 10 }}>OWNER</Tag>\r\n                            }\r\n\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n                <Modal title=\"Add More Members...\"\r\n                    visible={this.state.toggleAddMember}\r\n                    destroyOnClose\r\n                    onOk={this.addMembers}\r\n                    onCancel={this.toggleAddMember}>\r\n                    <Select\r\n                        mode=\"multiple\"\r\n                        allowClear\r\n                        style={{ width: '100%' }}\r\n                        placeholder=\"Start typing...\"\r\n                        onSearch={(e) => {\r\n                            this.setState({\r\n                                query: e\r\n                            }, this.searchMembers)\r\n                        }}\r\n                        onChange={this.updateMembersToAdd}\r\n                    >\r\n                        {\r\n                            this.state.membersToAdd.map(doc => {\r\n                                if (doc.isInServer) {\r\n                                    return <Option key={doc.key}>{`${doc.name} (${doc.email})`}</Option>\r\n                                } else {\r\n                                    return <Option key={doc.key}>{`Invite person with email '${doc.email}'`}</Option>\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    </Select>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport Overview from './ProjectsTabs/Overview';\r\nimport Bugs from './ProjectsTabs/Bugs';\r\nimport Announcements from './ProjectsTabs/Announcements';\r\nimport Calendar from './ProjectsTabs/Calendar';\r\nimport Settings from './ProjectsTabs/Settings';\r\nimport Collaborators from './ProjectsTabs/Collaborators'\r\nimport { Menu, Space } from 'antd';\r\nimport {\r\n\r\n    BugOutlined,\r\n    SettingOutlined,\r\n    DashboardOutlined,\r\n    CalendarOutlined,\r\n    NotificationOutlined,\r\n    TeamOutlined\r\n\r\n} from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport MediaQuery from 'react-responsive'\r\nimport { logErrorMessage } from '../../libraries/network-error-handling';\r\nimport { baseUrl, getDefaultHeader } from '../config';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let id = this.props.location.pathname.split('/');\r\n        id = id[id.length - 1];\r\n        this.state = {\r\n            activeTab: 'overview',\r\n            title: '',\r\n            imageUrl: '',\r\n            project: { id }\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let id = this.props.location.pathname.split('/');\r\n        id = id[id.length - 1];\r\n        // console.log(id)\r\n        this.updateProject(id);\r\n\r\n        const { location } = this.props;\r\n        let query = new URLSearchParams(location.search)\r\n        if (query.has('action')) {\r\n            this.getUriAction(query.get('action'))();\r\n        }\r\n    }\r\n\r\n    getUriAction = (action) => {\r\n        let actionSet = {\r\n            'OPEN_BUG': () => this.setState({ activeTab: 'bugs' }),\r\n            'OPEN_ANNOUNCEMENT': () => this.setState({ activeTab: 'announcements' })\r\n        }\r\n        return actionSet[action] ?? (() => null);\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const locationChanged =\r\n            this.props.location !== prevProps.location;\r\n\r\n\r\n        if (locationChanged) {\r\n            let id = this.props.location.pathname.split('/');\r\n            id = id[id.length - 1];\r\n            this.updateProject(id);\r\n\r\n            const { location } = this.props;\r\n            let query = new URLSearchParams(location.search)\r\n            if (query.has('action')) {\r\n                this.getUriAction(query.get('action'))();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateProject = async (id) => {\r\n        const token = window.localStorage.getItem('token');\r\n        id = id || this.state.project.id;\r\n        try {\r\n            let { data } = await axios.get('/project/find', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    projectId: id\r\n                }\r\n            });\r\n            // console.log(data)\r\n            if (data.project) {\r\n                this.setState({\r\n                    title: data.project.title,\r\n                    project: data.project,\r\n                    imageUrl: baseUrl + '/icon/' + (data.project.icon && data.project.icon[0] ? data.project.icon[0].id : '')\r\n                });\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n\r\n    handleClick = e => this.setState({ activeTab: e.key });\r\n\r\n    getImageSize = (isMobile) => {\r\n        if (isMobile) {\r\n            return 70\r\n        } else {\r\n            return (this.state.project.description ? 107 : 72)\r\n        }\r\n    }\r\n    render() {\r\n        const current = this.state.activeTab;\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <React.Fragment>\r\n                        <style>\r\n                            {\r\n                                `\r\n                        .bugg-skeleton-project-icon {\r\n                            transition: .3s\r\n                        }\r\n                        `\r\n                            }\r\n                        </style>\r\n                        <Space align='center'>\r\n\r\n\r\n                            <div\r\n                                className=\"bugg-skeleton-project-icon\"\r\n                                style={{\r\n                                    width: this.getImageSize(isMobile),\r\n                                    height: this.getImageSize(isMobile),\r\n                                    borderRadius: 5,\r\n                                    borderColor: 'rgba(0,0,0,.2)',\r\n                                    borderStyle: 'solid',\r\n                                    borderWidth: 1,\r\n                                    backgroundRepeat: 'no-repeat',\r\n                                    backgroundImage: 'url(' + this.state.imageUrl + ')',\r\n                                    backgroundPosition: 'center',\r\n                                    backgroundSize: 'cover',\r\n                                    backgroundColor: 'rgba(0 0 0 / 5%)',\r\n                                    marginRight: 10\r\n                                }} />\r\n                            <div>\r\n\r\n                                <h1 style={{\r\n                                    fontSize: isMobile ? 26 : 50,\r\n                                    margin: 0\r\n                                }}>\r\n                                    {this.state.title}\r\n                                </h1>\r\n                                <p style={{ margin: 0, opacity: .7, marginLeft: 3 }}>{this.state.project.description ?? ''}</p>\r\n                            </div>\r\n                        </Space>\r\n\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            marginRight: isMobile ? 10 : 64,\r\n                            flexDirection: 'column',\r\n\r\n                        }}>\r\n\r\n\r\n                            <Menu\r\n                                overflowedIndicator='More'\r\n                                style={{\r\n                                    marginBottom: 20,\r\n                                    marginTop: 20,\r\n                                    position: 'relative',\r\n                                    // flex: 1\r\n                                    width: '99%',\r\n                                    //left: -18,\r\n                                    // maxWidth: 900\r\n                                }}\r\n                                onClick={this.handleClick} selectedKeys={[current]} mode=\"horizontal\">\r\n                                <Menu.Item key=\"overview\" icon={<DashboardOutlined />}>\r\n                                    Overview\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"bugs\" icon={<BugOutlined />}>\r\n                                    Bugs\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"announcements\" icon={<NotificationOutlined />}>\r\n                                    Announcements\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"calendar\" icon={<CalendarOutlined />}>\r\n                                    Calendar\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"settings\" icon={<SettingOutlined />}>\r\n                                    Settings\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"collaborators\" icon={<TeamOutlined />}>\r\n                                    Collaborators\r\n                                </Menu.Item>\r\n                            </Menu>\r\n\r\n\r\n                        </div>\r\n                        {\r\n                            (() => {\r\n                                switch (this.state.activeTab) {\r\n                                    case \"overview\":\r\n                                        return <Overview project={this.state.project} />\r\n                                    case \"bugs\":\r\n                                        return <Bugs project={this.state.project} />\r\n                                    case \"announcements\":\r\n                                        return <Announcements project={this.state.project} />\r\n                                    case \"calendar\":\r\n                                        return <Calendar project={this.state.project} />\r\n                                    case \"settings\":\r\n                                        return <Settings project={this.state.project} updateProject={() => {\r\n                                            this.updateProject()\r\n                                            this.props.updateProjects()\r\n\r\n                                        }}\r\n                                            updateProjectOnNavigation={this.props.updateProjects}\r\n                                        />\r\n                                    case \"collaborators\":\r\n                                        return <Collaborators\r\n                                            isMobile={isMobile}\r\n                                            updateProject={this.props.updateProjects}\r\n                                            project={this.state.project} />\r\n                                    default:\r\n                                        return 'hi'\r\n                                }\r\n\r\n                            })()\r\n                        }\r\n\r\n\r\n\r\n                    </React.Fragment>\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import { useEffect, useState } from 'react';\r\nimport { Input, Space, Button, Select, Form, Upload, notification } from 'antd';\r\nimport axios from 'axios';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst { Option } = Select;\r\nlet formData = new FormData();\r\n\r\n\r\nexport function CreateProject(props) {\r\n\r\n\r\n    const [value, setValue] = useState([]);\r\n    // const [loading, setLoading] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [imageUri, setImageUri] = useState('');\r\n\r\n\r\n\r\n\r\n    const beforeUpload = async (file) => {\r\n        //console.log(file)\r\n        if (formData.get('icon')) {\r\n            formData.delete('icon')\r\n        }\r\n        formData.append('icon', file);\r\n\r\n        let fileReader = new FileReader();\r\n        fileReader.addEventListener('load', () => {\r\n            setImageUri(fileReader.result);\r\n        }, false)\r\n\r\n        fileReader.readAsDataURL(file);\r\n\r\n        return false;\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        let res;\r\n        console.log(value)\r\n\r\n        try {\r\n            res = await axios.post('/project/create', {\r\n                title: e.title,\r\n                description: e.description,\r\n                members: value.join()\r\n            },\r\n                {\r\n                    headers: getDefaultHeader()\r\n                });\r\n            if (formData.get('icon')) {\r\n                await axios.post('/icon/upload', formData, {\r\n                    headers: {\r\n                        ...(getDefaultHeader()),\r\n                        'Content-Type': 'multipart/form-data'\r\n                    },\r\n                    params: {\r\n                        projectId: res.data.id\r\n                    }\r\n                })\r\n            }\r\n            //  let imageResponse = \r\n\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n        }\r\n        if (res) {\r\n            console.log(res.data)\r\n            // message.success('project was created')\r\n            notification.success({\r\n                message: 'project was created'\r\n            })\r\n            form.resetFields();\r\n            props.updateProjects()\r\n            setImageUri('')\r\n            props.closeFunc()\r\n\r\n\r\n        }\r\n\r\n    }\r\n    // const [name, setName] = useState('imran')\r\n    const [members, setMembers] = useState([]);\r\n    const [query, setQuery] = useState();\r\n\r\n    useEffect(() => {\r\n        const handleChange = async () => {\r\n            let results;\r\n            // setLoading(true);\r\n\r\n            try {\r\n                results = await axios.get('/user/search', {\r\n                    params: {\r\n                        query: query\r\n                    },\r\n                    headers: getDefaultHeader()\r\n                })\r\n            } catch (e) {\r\n                console.error(getErrorMessage(e))\r\n                // setLoading(false);\r\n                return\r\n            }\r\n\r\n            //console.log(results.data)\r\n            let newMembers = [];\r\n            let users = results.data.results;\r\n            for (let i = 0; i < users.length; i++) {\r\n                newMembers.push({\r\n                    key: users[i].id,\r\n                    name: users[i].name,\r\n                    email: users[i].email,\r\n                    id: users[i].id\r\n                })\r\n            }\r\n\r\n            setMembers(newMembers);\r\n            //setLoading(false);\r\n            // console.log('Updated: ')\r\n            //console.log(newMembers);\r\n        }\r\n\r\n        handleChange()\r\n    }, [query])\r\n\r\n\r\n    const handleChange = (val, option) => {\r\n        //console.log(value)\r\n        setValue(val)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Space direction='vertical' style={{ width: '100%' }}>\r\n                <Form\r\n                    layout='vertical'\r\n                    onFinish={handleSubmit}\r\n                    form={form}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please add a title',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            type=\"text\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Description\"\r\n                        name=\"description\"\r\n\r\n                    >\r\n                        <Input\r\n                            type=\"text\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Icon\"\r\n                        name=\"icon\"\r\n\r\n                    >\r\n                        <Upload\r\n                            name=\"avatar\"\r\n                            listType=\"picture-card\"\r\n                            accept='image/*'\r\n                            showUploadList={false}\r\n                            // action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                            beforeUpload={beforeUpload}\r\n                        // onChange={this.handleChange}\r\n                        >\r\n                            {\r\n                                imageUri === '' ?\r\n                                    \"Upload Icon\" :\r\n                                    <div style={{\r\n                                        width: '80%',\r\n                                        height: '80%',\r\n                                        backgroundImage: 'url(' + imageUri + ')',\r\n                                        backgroundSize: 'cover',\r\n                                        backgroundPosition: 'center'\r\n                                    }}\r\n                                    />\r\n\r\n                            }\r\n\r\n                        </Upload>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Members\"\r\n                        name=\"members\"\r\n                    >\r\n                        <Select\r\n                            showSearch\r\n                            mode='multiple'\r\n                            // value={this.state.value}\r\n                            placeholder={\"search...\"}\r\n                            // style={this.props.style}\r\n                            // defaultActiveFirstOption={false}\r\n                            // showArrow={false}\r\n                            filterOption={false}\r\n                            onSearch={setQuery}\r\n                            onChange={handleChange}\r\n                        // notFoundContent={\"\"}\r\n                        >\r\n                            {/* <Option key={'1'}>{query}</Option> */}\r\n                            {\r\n                                members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Space style={{\r\n                        width: '100%',\r\n                        marginTop: 20,\r\n                        display: 'inline-flex',\r\n                        justifyContent: 'flex-end'\r\n                    }}>\r\n                        <Button onClick={() => {\r\n                            form.resetFields();\r\n                            props.closeFunc()\r\n                            setImageUri('')\r\n                        }}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            htmlType='submit'\r\n                            type='primary'>\r\n                            Create\r\n                        </Button>\r\n                    </Space>\r\n                </Form>\r\n\r\n\r\n\r\n\r\n\r\n            </Space>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Button, Input\r\n    , Space, notification\r\n} from 'antd'\r\nimport axios from 'axios';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst JoinProject = (props) => {\r\n    const [projectId, setProjectId] = useState('');\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        let res;\r\n\r\n        try {\r\n            res = await axios.post('/project/join', {\r\n                projectId\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n        } catch (e) {\r\n\r\n            console.error(getErrorMessage(e))\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n            return\r\n        }\r\n\r\n        notification.success({\r\n            message: 'You have joined project ' + res.data.project.title + '!'\r\n        })\r\n        props.updateProjects()\r\n        setProjectId('');\r\n        props.closeFunc();\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input\r\n                value={projectId}\r\n                onChange={(e) => setProjectId(e.target.value)}\r\n                placeholder=\"Type project ID here...\" />\r\n            <Space style={{\r\n                width: '100%',\r\n                marginTop: 20,\r\n                display: 'inline-flex',\r\n                justifyContent: 'flex-end'\r\n            }}>\r\n                <Button onClick={() => {\r\n                    setProjectId('');\r\n                    props.closeFunc();\r\n\r\n                }}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    onClick={handleSubmit}\r\n                    type='primary'>\r\n                    Join\r\n                </Button>\r\n            </Space>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default JoinProject","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Card, Button\r\n    , Col, Row, Divider, Space, Modal\r\n} from 'antd'\r\nimport { CreateProject } from './CreateProject'\r\nimport {\r\n    useHistory, withRouter\r\n} from \"react-router-dom\";\r\nimport JoinProject from './JoinProject';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { baseUrl } from '../pages/config';\r\n\r\nfunction Home(props) {\r\n\r\n    const [visibleCreate, setVisibleCreate] = useState(false);\r\n    const [visibleJoin, setVisibleJoin] = useState(false);\r\n    const projects = props.projects ?? [];\r\n    const history = useHistory();\r\n    const isMobile = useMediaQuery({ maxWidth: 800 })\r\n    useEffect(props.updateProjects, [])\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            marginRight: (isMobile ? 10 : 64),\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        }}>\r\n            <div >\r\n\r\n\r\n                <h1>\r\n                    Home\r\n                </h1>\r\n\r\n                <Divider />\r\n\r\n\r\n            </div>\r\n            <Modal\r\n                title=\"Create Project\"\r\n                footer={null}\r\n                onCancel={() => setVisibleCreate(false)}\r\n                visible={visibleCreate}>\r\n                <CreateProject\r\n                    updateProjects={props.updateProjects}\r\n                    closeFunc={() => setVisibleCreate(false)} />\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                title=\"Join Project\"\r\n                footer={null}\r\n                onCancel={() => setVisibleJoin(false)}\r\n                visible={visibleJoin}>\r\n                <JoinProject\r\n                    updateProjects={props.updateProjects}\r\n                    closeFunc={() => setVisibleJoin(false)} />\r\n            </Modal>\r\n\r\n\r\n\r\n            <style>{`\r\n.bugg-button:hover {\r\n    background-color: rgba(0 0 0 / 10%);\r\n    cursor: pointer;\r\n}\r\n\r\n.bugg-button {\r\n    transition: 0.5s;\r\n}\r\n`}</style>\r\n            <Row\r\n                // style={{ width: '90%' }}\r\n                gutter={16}>\r\n                <Col span={24}>\r\n                    <Card\r\n                        bodyStyle={{\r\n                            paddingLeft: 40,\r\n                            paddingRight: 40\r\n                        }}\r\n                        extra={\r\n                            <Space>\r\n                                <Button type='primary' onClick={() => setVisibleCreate(true)}>Create</Button>\r\n                                <Button onClick={() => setVisibleJoin(true)}>Join</Button>\r\n                            </Space>\r\n                        }\r\n                        title=\"Projects\">\r\n\r\n                        <Row gutter={[40, 40]} >\r\n                            {\r\n                                projects.map((item) => {\r\n                                    function getImageUri() {\r\n                                        if (item.icon.id) {\r\n                                            return baseUrl + '/icon/' + item.icon.id\r\n                                        } else {\r\n                                            return ''\r\n                                        }\r\n                                    }\r\n                                    return (\r\n                                        <Col //span={3}\r\n                                            xs={12}\r\n                                            md={6}\r\n                                            xl={3}\r\n                                        >\r\n                                            <ProjectButton\r\n                                                title={item.title}\r\n                                                onClick={() => history.push('/dashboard/projects/' + item.id)}\r\n                                                imageUrl={getImageUri()}\r\n                                            />\r\n                                        </Col>\r\n                                    )\r\n                                })\r\n\r\n                            }\r\n                        </Row>\r\n\r\n\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nconst ProjectButton = (props) => {\r\n    return (\r\n        <Space\r\n            style={{\r\n                width: '100%',\r\n                borderRadius: 5\r\n            }}\r\n\r\n            direction='vertical'\r\n            onClick={props.onClick}\r\n            align='center'>\r\n\r\n            <div\r\n                className=\"bugg-button\"\r\n                style={{\r\n                    width: 120,\r\n                    borderRadius: 5,\r\n                    paddingTop: 5\r\n                }}>\r\n\r\n                <div style={{\r\n                    width: 100,\r\n                    height: 100,\r\n                    borderRadius: 5,\r\n                    borderColor: 'rgba(0,0,0,.2)',\r\n                    borderStyle: 'solid',\r\n                    backgroundRepeat: 'no-repeat',\r\n                    borderWidth: 1,\r\n                    backgroundImage: 'url(' + props.imageUrl + ')',\r\n                    backgroundPosition: 'center',\r\n                    backgroundSize: 'cover',\r\n                    backgroundColor: 'rgba(0 0 0 / 5%)',\r\n                    marginLeft: 'auto',\r\n                    marginRight: 'auto'\r\n                }} />\r\n                <h4 style={{ maxWidth: 120, textAlign: 'center' }}>\r\n                    {props.title}\r\n                </h4>\r\n            </div>\r\n\r\n        </Space>\r\n\r\n    )\r\n}\r\n\r\nexport default withRouter(Home);","import React from 'react'\r\nimport {\r\n    Input, Button\r\n    , Modal, Divider, Space, //Timeline,\r\n    List,\r\n    Avatar,\r\n    Upload,\r\n\r\n\r\n} from 'antd';\r\nimport { message } from 'antd';\r\nimport MediaQuery from 'react-responsive';\r\nimport bugg, { getMe } from '../libraries/bugg';\r\nimport { reconfigToken } from '../libraries/socket';\r\nimport { getErrorMessage, logErrorMessage } from '../libraries/network-error-handling';\r\n\r\nconst data = [\r\n    'General',\r\n\r\n];\r\n\r\n\r\n\r\n\r\nclass Settings extends React.Component {\r\n    state = {\r\n        selectedSetting: data[0].toLowerCase(),\r\n        user: {\r\n            name: '',\r\n            email: '',\r\n            id: '',\r\n        },\r\n        name: '',\r\n        email: '',\r\n        loading: false,\r\n        password: '',\r\n        newPassword: '',\r\n        updatePasswordVisible: false,\r\n        loadingUpdatePassword: false,\r\n        previewImageUri: ''\r\n    }\r\n    componentDidMount() {\r\n        this.fetchUser()\r\n    }\r\n\r\n\r\n\r\n    beforeUpload = async (file) => {\r\n\r\n        let formData = new FormData();\r\n\r\n        formData.append('icon', file);\r\n\r\n\r\n        try {\r\n            await bugg.User.uploadUserIcon(formData);\r\n            this.fetchUser()\r\n            this.props.getWelcomeMessage()\r\n            message.success('Icon updated')\r\n        } catch (e) {\r\n\r\n            logErrorMessage(e)\r\n            message.error(getErrorMessage(e))\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    updateIcon = async () => {\r\n        try {\r\n            let iconUri = await bugg.User.getUserIconUri();\r\n            this.setState({\r\n                previewImageUri: iconUri\r\n            })\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    fetchUser = async () => {\r\n        try {\r\n            let user = await getMe();\r\n            this.updateIcon()\r\n\r\n            this.setState({\r\n                user,\r\n                name: user.name,\r\n                email: user.email\r\n            })\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Udates user name and email\r\n     */\r\n    updateUser = async (field, value) => {\r\n        this.setState({ loading: true })\r\n        try {\r\n            let user = await bugg.User.updateUser(field, value)\r\n\r\n            this.setState({\r\n                user,\r\n                name: user.name,\r\n                email: user.email\r\n            });\r\n            this.props.getWelcomeMessage()\r\n            message.success(\"user updated\")\r\n        } catch (e) {\r\n            this.setState({\r\n                [field]: this.state.user[field]\r\n            })\r\n            message.error('Error: ' + getErrorMessage(e))\r\n        }\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    updatePassword = async () => {\r\n        const { password, newPassword } = this.state;\r\n\r\n        if (!(password && newPassword)) {\r\n            message.error('Please input current and new password')\r\n            return;\r\n        }\r\n        this.setState({\r\n            loadingUpdatePassword: true\r\n        })\r\n        try {\r\n            let token = await bugg.User.updatePassword(password, newPassword);\r\n            message.success('Password updated');\r\n            this.setState({\r\n                updatePasswordVisible: false\r\n            })\r\n            window.localStorage.setItem('token', token);\r\n            reconfigToken();\r\n            this.fetchUser()\r\n\r\n        } catch (e) {\r\n            message.error(getErrorMessage(e))\r\n        }\r\n        this.setState({\r\n            loadingUpdatePassword: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const settings = [\r\n            {\r\n                title: 'Name',\r\n                reactNode: (<Space  >\r\n\r\n                    <Input\r\n                        value={this.state.name}\r\n                        onPressEnter={() => {\r\n                            if (this.state.name !== this.state.user.name) this.updateUser('name', this.state.name)\r\n                        }}\r\n                        onChange={(e) => {\r\n                            this.setState({\r\n                                name: e.target.value\r\n                            })\r\n                        }}\r\n\r\n                        type=\"text\" />\r\n                    <Button\r\n                        loading={this.state.loading}\r\n                        onClick={() => this.updateUser('name', this.state.name)}\r\n                        type='primary'\r\n                        disabled={(this.state.name === this.state.user.name)}\r\n\r\n                    >\r\n                        Update\r\n                    </Button>\r\n\r\n                </Space>)\r\n            }, {\r\n                title: 'Email',\r\n                reactNode: (<Space  >\r\n\r\n                    <Input\r\n                        value={this.state.email}\r\n                        onPressEnter={() => {\r\n                            if (this.state.email !== this.state.user.email) this.updateUser('email', this.state.email)\r\n                        }}\r\n                        onChange={(e) => {\r\n                            this.setState({\r\n                                email: e.target.value\r\n                            })\r\n                        }}\r\n                        type=\"text\" />\r\n                    <Button\r\n                        loading={this.state.loading}\r\n                        onClick={() => this.updateUser('email', this.state.email)}\r\n                        type='primary'\r\n                        disabled={(this.state.email === this.state.user.email)}\r\n\r\n                    >\r\n                        Update\r\n                    </Button>\r\n\r\n                </Space>)\r\n            }, {\r\n                title: 'Password',\r\n                reactNode: (\r\n                    <Button\r\n\r\n                        onClick={() => this.setState({ updatePasswordVisible: true })}\r\n                        type='primary'\r\n\r\n\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                )\r\n            },\r\n            {\r\n                title: 'User Icon',\r\n                reactNode: (\r\n                    <div>\r\n                        <Upload\r\n                            name=\"avatar\"\r\n                            listType=\"picture-card\"\r\n                            accept='image/*'\r\n                            showUploadList={false}\r\n\r\n                            beforeUpload={this.beforeUpload}\r\n                        // beforeUpload={() => { message.error('das'); return false; }}\r\n                        >\r\n                            {\r\n                                !this.state.previewImageUri ?\r\n                                    \"Upload Icon\" :\r\n                                    <div style={{\r\n                                        width: '80%',\r\n                                        height: '80%',\r\n                                        backgroundImage: 'url(' + this.state.previewImageUri + ')',\r\n                                        backgroundSize: 'cover',\r\n                                        backgroundPosition: 'center'\r\n                                    }}\r\n                                    />\r\n\r\n                            }\r\n\r\n                        </Upload>\r\n                    </div>\r\n\r\n                )\r\n            },\r\n        ]\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <div\r\n                        style={{\r\n                            marginRight: isMobile ? 10 : 64\r\n                        }}\r\n                    >\r\n                        <style>{`\r\n.bugg-list-item-button:hover {\r\n    background-color: rgb(0 0 0 / 5%);\r\n    cursor: pointer;\r\n}\r\n.bugg-list-item-button {\r\n    background-color: white;\r\n}\r\n`}</style>\r\n\r\n\r\n                        <h1>\r\n                            Settings\r\n                        </h1>\r\n                        <Divider\r\n\r\n                        />\r\n\r\n\r\n\r\n                        <div style={{\r\n                            display: isMobile ? 'flex' : 'inline-flex',\r\n                            width: '100%',\r\n                            flexDirection: isMobile ? 'column' : 'unset'\r\n                        }}>\r\n\r\n                            <div>\r\n\r\n                                <List\r\n                                    // header={<div>Header</div>}\r\n                                    // footer={<div>Footer</div>}\r\n                                    bordered\r\n                                    dataSource={data}\r\n                                    style={{\r\n                                        width: isMobile ? 'unset' : 200,\r\n                                        marginBottom: isMobile ? 20 : 'unset'\r\n                                    }}\r\n                                    renderItem={(item, ind) => (\r\n                                        <List.Item\r\n                                            key={ind}\r\n                                            style={{\r\n                                                color: (this.state.selectedSetting === item.toLowerCase() ? '#0094f7' : 'black')\r\n                                            }}\r\n                                            className=\"bugg-list-item-button\">\r\n                                            <Avatar\r\n                                                style={{\r\n                                                    marginRight: 10\r\n                                                }}\r\n                                            >{item.substring(0, 1).toLocaleUpperCase()}</Avatar> {item}\r\n                                        </List.Item>\r\n                                    )}\r\n                                /></div>\r\n\r\n                            <div style={{\r\n                                flex: 1,\r\n                                marginLeft: isMobile ? 0 : 20\r\n                            }}>\r\n                                {\r\n                                    (() => {\r\n\r\n                                        switch (this.state.selectedSetting) {\r\n                                            case data[0].toLowerCase():\r\n                                                return (\r\n                                                    <List\r\n                                                        bordered\r\n                                                        style={{\r\n                                                            // maxWidth: 600\r\n                                                        }}\r\n                                                        itemLayout=\"vertical\"\r\n                                                        dataSource={settings}\r\n                                                        renderItem={item =>\r\n                                                            <List.Item\r\n                                                                key={item.title}\r\n                                                                extra={[item.reactNode]}\r\n                                                            >\r\n                                                                {item.title}\r\n                                                            </List.Item>}\r\n                                                    />\r\n                                                )\r\n                                            default:\r\n                                                return 'no tab selected'\r\n                                        }\r\n\r\n                                    })()\r\n                                }\r\n                            </div>\r\n                            <Modal\r\n                                okButtonProps={{\r\n                                    loading: this.state.loadingUpdatePassword\r\n                                }}\r\n                                destroyOnClose\r\n                                visible={this.state.updatePasswordVisible}\r\n                                title=\"Update Password\"\r\n                                onOk={this.updatePassword}\r\n                                onCancel={() => this.setState({ updatePasswordVisible: false })}\r\n                            >\r\n                                <p style={{ marginBottom: 10 }}>Current Password: </p>\r\n                                <Input\r\n                                    type='password'\r\n                                    autoComplete='new-password'\r\n                                    name='new-password'\r\n                                    value={this.state.password}\r\n                                    onChange={(e) => this.setState({ password: e.target.value })}\r\n                                    placeholder='Type here...'\r\n                                />\r\n\r\n                                <p style={{ marginBottom: 10, marginTop: 20 }}>New Password: </p>\r\n                                <Input\r\n                                    type='password'\r\n                                    autoComplete='new-password'\r\n                                    value={this.state.newPassword}\r\n                                    onChange={(e) => this.setState({ newPassword: e.target.value })}\r\n                                    placeholder='Type here...'\r\n                                />\r\n                            </Modal>\r\n\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </MediaQuery>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Settings;","import React from 'react'\r\nimport {\r\n    Card, Button, Avatar\r\n    , Tag, List, Space, message\r\n} from 'antd'\r\nimport axios from 'axios';\r\nimport { MailOutlined } from '@ant-design/icons'\r\nimport moment from 'moment';\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport { getErrorMessage, logErrorMessage } from '../libraries/network-error-handling';\r\nimport { getDefaultHeader } from './config';\r\nimport { addEventListener, removeEventListener } from '../libraries/socket';\r\n\r\nclass Notification extends React.Component {\r\n\r\n    state = {\r\n        page: 1,\r\n        pageSize: 10,\r\n        notifications: [],\r\n        total: 1,\r\n        isListening: false\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        addEventListener('new-notification', this.onRecieveNotitification)\r\n        this.fetchNotifications()\r\n        // alert('hi')\r\n    }\r\n\r\n    getAction = (notification) => {\r\n        switch (notification.type) {\r\n            case 'PROJECT_INVITE':\r\n                this.props.joinProject(notification.payload.projectId)\r\n                break;\r\n            case 'NEW_MESSAGE':\r\n                this.props.openNewMessage(notification.payload.conversationId);\r\n                this.props.close()\r\n                break;\r\n            case 'NEW_BUG':\r\n                this.props.history\r\n                    .push('/dashboard/projects/' + notification.payload.projectId + `?action=OPEN_BUG&bugId=${notification.payload.bugId}`);\r\n                this.props.close()\r\n                break;\r\n            case 'NEW_ANNOUNCEMENT':\r\n                this.props.history\r\n                    .push('/dashboard/projects/' + notification.payload.projectId + `?action=OPEN_ANNOUNCEMENT&announcementId=${notification.payload.announcementId}`);\r\n                this.props.close()\r\n                break;\r\n            default:\r\n                message.error(\"no type given\")\r\n        }\r\n        this.dismissNotification(notification.id)\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        removeEventListener('new-notification', this.onRecieveNotitification)\r\n    }\r\n\r\n    /**\r\n     * Dismisses notification on server\r\n     * @param {string} notificationId Id of notification\r\n     */\r\n    dismissNotification = async (notificationId) => {\r\n        try {\r\n            await axios.delete('/notification/' + notificationId, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            this.fetchNotifications()\r\n            message.success(\"Notification Dismissed\")\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n\r\n    }\r\n\r\n    dismissAllNotifications = async () => {\r\n        try {\r\n            await axios.delete('/notification/all', {\r\n                headers: getDefaultHeader()\r\n            })\r\n            this.fetchNotifications()\r\n            message.success(\"All notifications were dismissed\")\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n            message.error(\"Error: \" + getErrorMessage(e))\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onRecieveNotitification = (notif) => {\r\n        this.setState({\r\n            page: 1\r\n        }, this.fetchNotifications);\r\n\r\n    }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     if (prevProps.socket === null && this.props.socket !== null) {\r\n    //         this.props.socket.on('new-notification', this.onRecieveNotitification)\r\n    //     }\r\n    // }\r\n\r\n\r\n    fetchNotifications = async () => {\r\n        const { page, pageSize } = this.state;\r\n\r\n        try {\r\n            let { data } = await axios.get('/notification/all', {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    limit: pageSize,\r\n                    skip: (page - 1) * pageSize\r\n                }\r\n            });\r\n            console.log(data)\r\n\r\n            this.setState({\r\n                notifications: data.notifications,\r\n                total: data.totalNotifications\r\n            })\r\n\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    updatePagination = (page, pageSize) => {\r\n        this.setState({\r\n            page, pageSize\r\n        }, this.fetchNotifications)\r\n    }\r\n\r\n    getNotificationActionMessage = (type) => {\r\n        let message = {\r\n            'PROJECT_INVITE': 'Join Project',\r\n            'NEW_MESSAGE': 'View Message'\r\n        }\r\n        return message[type] ?? 'View'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Space style={{\r\n                    marginBottom: 20\r\n                }}>\r\n                    <Button\r\n                        onClick={this.dismissAllNotifications}\r\n                        type='primary'>\r\n                        Dismiss All\r\n                    </Button>\r\n                </Space>\r\n                <List\r\n                    pagination={{\r\n                        pageSize: this.state.pageSize,\r\n                        page: this.state.page,\r\n                        onChange: this.updatePagination,\r\n                        total: this.state.total\r\n                    }}\r\n                    dataSource={this.state.notifications}\r\n                    renderItem={item =>\r\n                        <div\r\n                            key={item.id}\r\n                            style={{\r\n                                marginBottom: 20\r\n                            }}>\r\n                            <Card\r\n                                actions={[\r\n                                    <Button\r\n                                        onClick={() => this.getAction(item)}\r\n                                        type='primary'>{this.getNotificationActionMessage(item.type)}</Button>,\r\n                                    <Button\r\n                                        onClick={() => this.dismissNotification(item.id)}\r\n                                        type='link'>Dismiss</Button>\r\n                                ]}\r\n                            >\r\n                                <Card.Meta\r\n                                    avatar={<Avatar icon={<MailOutlined />} />}\r\n                                    title={<>{item.title}\r\n                                        {/* <span style={{ color: 'red' }}>\r\n                                            {!item.read ? 'ddd' : ' - Unread'}\r\n                                        </span> */}\r\n                                        {item.read ? null : <Tag color='red' style={{ marginLeft: 10 }}>New</Tag>}\r\n                                    </>}\r\n\r\n                                    description={\r\n                                        item.description + ' - ' + moment(new Date(item.createdAt)).fromNow()\r\n                                    }\r\n                                />\r\n                            </Card>\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter(Notification);","import moment from \"moment\";\r\nimport { Tag, Space, Card, Button, List, Avatar } from 'antd'\r\nimport {\r\n\r\n    MinusOutlined\r\n} from '@ant-design/icons';\r\n\r\n\r\nfunction MessageContacts(props) {\r\n    const {\r\n        toggleCollapse,\r\n        toggleHide,\r\n        sendMessage,\r\n        conversations,\r\n        selectConversation,\r\n        activeConversations,\r\n        isMobile\r\n    } = props;\r\n\r\n    const showNew = (conversation) => {\r\n        let activeConversationsIds = activeConversations.map(doc => doc.id);\r\n\r\n        if (activeConversationsIds.includes(conversation.id)) {\r\n            return false;\r\n        } else {\r\n            return conversation.newMessages\r\n        }\r\n\r\n    }\r\n\r\n    const getDisplay = () => {\r\n        if (isMobile) {\r\n            if (activeConversations.length > 0) {\r\n                return 'none'\r\n            } else {\r\n                return (toggleHide) ? 'none' : 'block'\r\n            }\r\n        } else {\r\n            return (toggleHide) ? 'none' : 'block'\r\n        }\r\n\r\n    }\r\n\r\n    const formatName = (name) => {\r\n        var nameSegments = name.split(' ');\r\n        let shortHandName = nameSegments[0];\r\n\r\n        if (nameSegments[1]) {\r\n            shortHandName += ' ' + nameSegments[1].substring(0, 1).toUpperCase() + '.'\r\n        }\r\n\r\n        return shortHandName\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <Card\r\n            headStyle={{\r\n                backgroundColor: '#2f2f2f',\r\n                color: 'white',\r\n\r\n            }}\r\n\r\n            title=\"Contacts\"\r\n            extra={\r\n                <Space size='middle'>\r\n                    <Button\r\n                        onClick={toggleCollapse}\r\n                        type='text' icon={<MinusOutlined style={{ color: 'white' }} />} />\r\n                </Space>\r\n            }\r\n\r\n            style={{\r\n                width: 350,\r\n                //height: 64,\r\n                borderColor: 'rgba(0,0,0,.3)',\r\n                padding: 0,\r\n                overflow: 'hidden',\r\n                display: getDisplay()\r\n            }}\r\n            id=\"contacts-card\"\r\n            bodyStyle={{\r\n                padding: 0,\r\n                height: 300,\r\n                display: 'flex',\r\n                flexDirection: 'column'\r\n            }}\r\n        >\r\n            <Space style={{\r\n                width: '100%',\r\n                marginTop: 20,\r\n                marginBottom: 20\r\n            }}\r\n            >\r\n                <Button\r\n                    style={{\r\n                        marginLeft: 20\r\n                    }}\r\n                    onClick={sendMessage}\r\n                    type='primary'>\r\n                    Send New Message\r\n                </Button>\r\n            </Space>\r\n            <div style={{\r\n                flex: 1,\r\n                overflowY: 'auto'\r\n            }}>\r\n                <List\r\n                    dataSource={conversations}\r\n                    renderItem={item => (\r\n                        <List.Item\r\n                            key={item.id}\r\n                            style={{\r\n                                paddingLeft: 20,\r\n                                paddingRight: 20\r\n                            }}\r\n                            extra={[moment((new Date(item.updatedAt)).getTime()).fromNow()]}\r\n                        >\r\n                            <List.Item.Meta\r\n                                title={<>\r\n                                    <a href=\"#\" onClick={(e) => selectConversation(e, item)}\r\n                                    >{formatName(item.reciepent.name)}\r\n                                    </a>\r\n                                    {showNew(item) ?\r\n                                        <Tag\r\n                                            style={{\r\n                                                marginLeft: 10\r\n                                            }}\r\n                                            color='red'>New</Tag> : null\r\n                                    }\r\n\r\n                                </>}\r\n                                avatar={\r\n                                    <Avatar style={{ marginRight: 10 }}>\r\n                                        {item.reciepent.name.substring(0, 1).toUpperCase()}\r\n                                    </Avatar>}\r\n                                description={item.lastMessageText}\r\n                            />\r\n\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MessageContacts","import react from 'react';\r\nimport {\r\n    Card,\r\n    Space,\r\n    Button,\r\n    Input,\r\n    Avatar,\r\n    List, Tag\r\n} from 'antd';\r\nimport {\r\n    CloseOutlined, MinusOutlined\r\n} from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport anime from 'animejs';\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage, logErrorMessage } from '../libraries/network-error-handling';\r\nimport bugg from '../libraries/bugg'\r\nimport { addEventListener, removeEventListener } from './../libraries/socket';\r\n\r\n\r\nfunction Message(props) {\r\n    if (props.recipient)\r\n        return (\r\n            <div style={{\r\n                display: 'inline-flex',\r\n\r\n                width: '100%'\r\n            }}>\r\n                <Avatar style={{ marginLeft: 7, }}>{props.avatarLetter}</Avatar>\r\n                <p style={{\r\n                    maxWidth: 200,\r\n                    backgroundColor: 'rgb(0 0 0 / 20%)',\r\n                    padding: 5,\r\n                    borderRadius: 4,\r\n                    marginLeft: 10\r\n                }}>\r\n                    {props.message}\r\n                </p>\r\n            </div>)\r\n    else if (props.sender) {\r\n        return (<div style={{\r\n            display: 'inline-flex',\r\n            justifyContent: 'flex-end',\r\n\r\n            width: '100%'\r\n        }}>\r\n\r\n            <p style={{\r\n                maxWidth: 200,\r\n                backgroundColor: 'rgb(24 144 255 / 30%)',\r\n                padding: 5,\r\n                borderRadius: 4,\r\n                marginRight: 10\r\n            }}>\r\n                {props.message}\r\n            </p>\r\n            <Avatar style={{ marginRight: 7, }}>{props.avatarLetter}</Avatar>\r\n        </div>)\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default class MessageContainer extends react.Component {\r\n    state = {\r\n        messages: [],\r\n        body: '',\r\n        toggledState: false,\r\n        listening: false,\r\n        newMessages: false\r\n    }\r\n    TOKEN = window.localStorage.getItem('token')\r\n\r\n    async componentDidMount() {\r\n        await this.fetchMessages();\r\n        this.props.fetchUnreadNotifications()\r\n        addEventListener('new-message', this.onRecieveNewMessage)\r\n        this.props.fetchConversations()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // remove message event handler\r\n        removeEventListener('new-message', this.onRecieveNewMessage)\r\n    }\r\n\r\n\r\n\r\n    // TODO: add invite reverse scroll\r\n    fetchMessages = async () => {\r\n        try {\r\n            let { data } = await axios.get('/conversation/' + this.props.conversation.id, {\r\n                headers: getDefaultHeader(),\r\n                params: {\r\n                    limit: 20,\r\n                    skip: 0\r\n                }\r\n            });\r\n\r\n            this.setState({\r\n                messages: data.messages.reverse(),\r\n                total: data.total\r\n            })\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    sendMessage = async () => {\r\n        if (this.state.body.replace(/ /g, \"\") === '') return;\r\n\r\n        try {\r\n            let { data } = await axios.post('/message/' + this.props.conversation.recipient.id, {\r\n                body: this.state.body\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            let { messages } = this.state;\r\n            messages.push(data.message);\r\n            this.setState({\r\n                messages,\r\n                body: ''\r\n            })\r\n            this.props.fetchConversations()\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n\r\n    toggleCollapse = () => {\r\n        let newToggleState = !this.state.toggledState\r\n        this.setState({\r\n            toggledState: newToggleState\r\n        })\r\n\r\n        let elem = document.getElementById(this.props.conversation.id)\r\n\r\n\r\n        if (newToggleState) {\r\n            anime({\r\n                targets: [elem],\r\n                height: 64,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            })\r\n        } else {\r\n            this.setState({\r\n                newMessages: false\r\n            })\r\n            anime({\r\n                targets: [elem],\r\n                height: 364,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onRecieveNewMessage = (message) => {\r\n\r\n        let { messages } = this.state;\r\n        messages.push(message);\r\n        this.setState({\r\n            messages\r\n        })\r\n        if (this.state.toggledState) {\r\n            this.setState({\r\n                newMessages: true\r\n            })\r\n        }\r\n        this.props.fetchConversations()\r\n    }\r\n\r\n    readAllMessages = async () => {\r\n        try {\r\n            await bugg.Message.readAllMessages(this.props.conversation.id)\r\n            this.props.fetchUnreadNotifications()\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { removeConversation, conversation } = this.props;\r\n\r\n\r\n\r\n        return (\r\n            <Card\r\n                headStyle={{\r\n                    backgroundColor: '#2f2f2f',\r\n                    color: 'white',\r\n\r\n                }}\r\n                id={conversation.id}\r\n                title={<> {conversation.reciepent.name} {this.state.newMessages ? <Tag style={{ marginLeft: 10 }} color='red'>New Message</Tag> : null} </>}\r\n                extra={\r\n                    <Space size='middle'>\r\n                        <Button\r\n                            onClick={this.toggleCollapse}\r\n\r\n                            type='text' icon={<MinusOutlined style={{ color: 'white' }} />} />\r\n                        <Button\r\n                            type='text'\r\n                            onClick={async () => {\r\n                                await this.readAllMessages()\r\n                                removeConversation(conversation.id)\r\n                            }}\r\n                            icon={<CloseOutlined style={{ color: 'white' }} />}\r\n                        />\r\n\r\n\r\n                    </Space>}\r\n\r\n                style={{\r\n                    width: 350,\r\n                    //height: 64 \r\n                    borderColor: 'rgba(0,0,0,.3)',\r\n                    padding: 0,\r\n                    overflow: 'hidden',\r\n                    display: this.props.toggleHide ? 'none' : 'block'\r\n                }}\r\n                bodyStyle={{\r\n                    padding: 0,\r\n                    height: 300\r\n                }}\r\n            >\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    height: '100%'\r\n                }}>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            // justifyContent: 'flex-end',\r\n                            flexDirection: 'column-reverse',\r\n                            overflowY: 'auto'\r\n                        }}\r\n                        direction='vertical'>\r\n                        {/* <Message sender message=\"bruh\" /> */}\r\n                        {/* {(new Array(20)).fill(2).map((val, ind) => <div>\r\n                            <Message sender message={\"bruh \" + ind} />\r\n                        </div>)} */}\r\n                        <List\r\n\r\n                            dataSource={this.state.messages}\r\n                            renderItem={(item, index) =>\r\n                                <div key={item.id}>\r\n                                    <Message\r\n                                        sender={item.sender.isYou}\r\n                                        recipient={!item.sender.isYou}\r\n                                        timestamp={item.createdAt}\r\n                                        avatarLetter={item.sender.name.substring(0, 1).toUpperCase()}\r\n                                        message={item.body} />\r\n                                </div>\r\n\r\n                            }\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        //backgroundColor: 'green',\r\n                        width: '100%',\r\n                        padding: 6,\r\n                        display: 'inline-flex'\r\n                    }}>\r\n                        <Input\r\n                            style={{\r\n                                flex: 1,\r\n                                marginRight: 10\r\n                            }}\r\n                            placeholder='Start Typing...'\r\n                            value={this.state.body}\r\n                            onChange={(e) => this.setState({ body: e.target.value })}\r\n                            onPressEnter={this.sendMessage}\r\n\r\n                        />\r\n                        <Button\r\n                            // style={{\r\n                            //     height: 60\r\n                            // }}\r\n                            onClick={this.sendMessage}\r\n                            type='primary' >\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n}","import react from \"react\";\r\nimport { Input, message, Modal, Select } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { getDefaultHeader } from '../pages/config';\r\nimport { getErrorMessage } from '../libraries/network-error-handling';\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport default class CreateConversation extends react.Component {\r\n    state = {\r\n        members: [],\r\n        selectedMember: '',\r\n        query: '',\r\n        body: ''\r\n    }\r\n    TOKEN = window.localStorage.getItem('token')\r\n\r\n    searchUsers = async () => {\r\n        let results;\r\n        const { query } = this.state;\r\n        try {\r\n            results = await axios.get('/user/search', {\r\n                params: {\r\n                    query: query\r\n                },\r\n                headers: getDefaultHeader()\r\n            })\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n\r\n            return\r\n        }\r\n\r\n        //console.log(results.data)\r\n        let newMembers = [];\r\n        let users = results.data.results;\r\n        for (let i = 0; i < users.length; i++) {\r\n            newMembers.push({\r\n                key: users[i].id,\r\n                name: users[i].name,\r\n                email: users[i].email,\r\n                id: users[i].id\r\n            })\r\n        }\r\n        this.setState({\r\n            members: newMembers\r\n        })\r\n    }\r\n\r\n    selectUser = (value) => {\r\n        this.setState({\r\n            selectedMember: value\r\n        })\r\n    }\r\n\r\n    sendMessage = async () => {\r\n        if (this.state.body.replace(/ /g, \"\") === '') {\r\n            message.error(\"Please enter message\")\r\n            return\r\n        };\r\n\r\n        if (!this.state.selectedMember) {\r\n            message.error(\"Please select a recipient\")\r\n            return\r\n        }\r\n\r\n        try {\r\n            let { data } = await axios.post('/message/' + this.state.selectedMember, {\r\n                body: this.state.body\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            // let { messages } = this.state;\r\n            // messages.push(data.message);\r\n            this.setState({\r\n\r\n                body: ''\r\n            })\r\n            console.log(data.message.conversation)\r\n            await this.props.fetchConversations()\r\n            this.props.selectConversation(data.message.conversation)\r\n            this.props.closeModal()\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                visible={this.props.visible}\r\n                title='Send New Message'\r\n                onCancel={this.props.closeModal}\r\n                onOk={this.sendMessage}\r\n                destroyOnClose\r\n            >\r\n                <p>Send To:</p>\r\n                <Select\r\n                    showSearch\r\n                    placeholder={\"search...\"}\r\n                    style={{ width: '100%' }}\r\n                    filterOption={false}\r\n                    onSearch={(e) => {\r\n                        this.setState({\r\n                            query: e\r\n                        }, this.searchUsers)\r\n                    }}\r\n                    onChange={this.selectUser}\r\n\r\n                >\r\n                    {this.state.members.map(doc => <Option key={doc.id}>{`${doc.name} (${doc.email})`}</Option>)}\r\n                </Select>\r\n                <br />\r\n                <p style={{ marginTop: 20 }}>Message:</p>\r\n                <Input\r\n                    onChange={(e) => this.setState({ body: e.target.value })}\r\n                    value={this.state.body}\r\n                    onPressEnter={this.sendMessage}\r\n                    placeholder='Start typing...'\r\n                />\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport MessageContacts from './../components/MessageContacts';\r\nimport {\r\n    Button,\r\n    Space,\r\n    Tooltip,\r\n} from 'antd';\r\nimport {\r\n    MessageOutlined\r\n} from '@ant-design/icons';\r\nimport anime from 'animejs/lib/anime.es.js';\r\nimport MessageContainer from '../components/MessageContainer';\r\nimport CreateConversation from '../components/CreateConversation';\r\nimport { logErrorMessage } from '../libraries/network-error-handling';\r\nimport { addEventListener, removeEventListener } from '../libraries/socket';\r\nimport bugg from './../libraries/bugg';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthed: false,\r\n            collapsed: true,\r\n            contactsCollapsed: false,\r\n            openMessageCollapsed: false,\r\n            toggleHide: true,\r\n            conversations: [],\r\n            activeConversations: [],\r\n            socket: null,\r\n            createConversationIsVisible: false\r\n        };\r\n\r\n    }\r\n\r\n    // TODO: on recieve new message, re fetch conversations\r\n    componentDidMount() {\r\n        this.fetchConversations()\r\n        // this.connectToSocket()\r\n        this.props.setOpenNewMessage(this.openNewMessage);\r\n        addEventListener('new-message', this.fetchConversations)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeEventListener('new-message', this.fetchConversations)\r\n    }\r\n\r\n    toggleHideSimple = (disableRefresh) => {\r\n        let newToggleHide = !this.state.toggleHide;\r\n        this.setState({ toggleHide: newToggleHide })\r\n\r\n\r\n        if (!newToggleHide && disableRefresh !== true) {\r\n            this.fetchConversations()\r\n\r\n        }\r\n    }\r\n\r\n    openNewMessage = async (conversationId) => {\r\n        // alert('HEY')\r\n        if (this.state.toggleHide) {\r\n            this.toggleHideSimple(true)\r\n        }\r\n\r\n        await this.fetchConversations()\r\n        let conversationIds = this.state.conversations.map(doc => doc.id);\r\n        console.log(conversationId)\r\n        console.log(conversationIds)\r\n        let ind = conversationIds.indexOf(conversationId);\r\n        console.log(ind)\r\n        if (ind === -1) return;\r\n\r\n        this.selectConversation(this.state.conversations[ind]);\r\n    }\r\n\r\n    // TODO: rework to aim for multiple components\r\n    toggleCollapse = (name) => {\r\n        let toggledState = !this.state[name];\r\n\r\n        this.setState({\r\n            [name]: toggledState\r\n        })\r\n\r\n        let elem;\r\n\r\n        if (name === 'contactsCollapsed') {\r\n            elem = document.getElementById('contacts-card')\r\n\r\n        } else if (name === 'openMessageCollapsed') {\r\n            elem = document.getElementById('open-message-card')\r\n        }\r\n\r\n        if (toggledState) {\r\n\r\n            anime({\r\n                targets: [elem],\r\n                height: 64,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            })\r\n        } else {\r\n            anime({\r\n                targets: [elem],\r\n                height: 364,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Recieves conversations from server and sets state\r\n     * \r\n     */\r\n    fetchConversations = async () => {\r\n        try {\r\n            // let { data: { conversations } } = await axios.get('/conversation/all', {\r\n            //     headers: getDefaultHeader()\r\n            // })\r\n            let conversations = await bugg.Message.getConversations()\r\n            await new Promise((res) => this.setState({ conversations }, res))\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n\r\n    selectConversation = (conversation) => {\r\n        let newConvos = this.state.activeConversations\r\n        if (newConvos.map((doc) => doc.id).includes(conversation.id)) return\r\n\r\n        if (newConvos.length === 2) {\r\n            newConvos.splice(0, 1)\r\n            newConvos.push(conversation)\r\n        } else {\r\n            newConvos.push(conversation)\r\n        }\r\n        this.setState({\r\n            activeConversations: newConvos\r\n        })\r\n        this.props.setActiveConversationIds(newConvos.map(doc => doc.id))\r\n    }\r\n\r\n    /**\r\n     * removes conversation from state\r\n     * @param {string} conversationId \r\n     */\r\n    removeConversation = (conversationId) => {\r\n        let newConvos = this.state.activeConversations;\r\n        let index = newConvos.findIndex((value) => value.id === conversationId);\r\n\r\n        if (index !== -1) {\r\n            newConvos.splice(index, 1);\r\n            this.setState({\r\n                activeConversations: newConvos\r\n            })\r\n            this.props.setActiveConversationIds(newConvos.map(doc => doc.id))\r\n        }\r\n        this.fetchConversations()\r\n\r\n    }\r\n\r\n    showNew = (conversation) => {\r\n        let activeConversationsIds = this.state.activeConversations.map(doc => doc.id);\r\n\r\n        if (activeConversationsIds.includes(conversation.id)) {\r\n            return false;\r\n        } else {\r\n            return conversation.newMessages\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { isMobile } = this.props;\r\n\r\n        return (\r\n            <Space\r\n                align={isMobile ? 'start' : 'end'}\r\n                size='large'\r\n                direction={isMobile ? 'vertical' : 'horizontal'}\r\n                style={{\r\n                    position: 'fixed',\r\n                    left: isMobile ? 10 : 17.5,\r\n                    bottom: 20,\r\n                    zIndex: 100,\r\n\r\n\r\n                }}>\r\n                {\r\n                    !isMobile && <Tooltip\r\n                        placement='right'\r\n                        title=\"Messages\">\r\n                        <Button shape=\"circle\" size='large'\r\n                            onClick={this.toggleHideSimple}\r\n                            icon={<MessageOutlined />} />\r\n                    </Tooltip>}\r\n                {\r\n                    // Contacts card\r\n                }\r\n                <div>\r\n                    <MessageContacts\r\n                        toggleCollapse={() => this.toggleCollapse('contactsCollapsed')}\r\n                        toggleHide={this.state.toggleHide}\r\n                        isMobile={isMobile}\r\n                        sendMessage={() => this.setState({ createConversationIsVisible: true })}\r\n                        conversations={this.state.conversations}\r\n                        selectConversation={(e, item) => {\r\n                            this.selectConversation(item)\r\n                            e.preventDefault()\r\n                        }}\r\n                        activeConversations={this.state.activeConversations}\r\n                    />\r\n                </div>\r\n\r\n                {\r\n                    this.state.activeConversations.map((item) =>\r\n                        <MessageContainer\r\n                            key={item.id}\r\n                            socket={this.state.socket}\r\n                            toggleHide={this.state.toggleHide}\r\n                            fetchConversations={this.fetchConversations}\r\n                            removeConversation={this.removeConversation}\r\n                            conversation={item}\r\n                            fetchUnreadNotifications={this.props.fetchUnreadNotifications}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    isMobile && <Tooltip\r\n                        placement='right'\r\n                        title=\"Messages\">\r\n                        <Button shape=\"circle\" size='large'\r\n                            onClick={this.toggleHideSimple}\r\n                            icon={<MessageOutlined />} />\r\n                    </Tooltip>}\r\n\r\n                <CreateConversation\r\n                    visible={this.state.createConversationIsVisible}\r\n                    fetchConversations={this.fetchConversations}\r\n                    selectConversation={this.selectConversation}\r\n                    closeModal={() => this.setState({ createConversationIsVisible: false })}\r\n                />\r\n            </Space >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import { withRouter } from 'react-router-dom';\r\nimport { Space, Button, Menu } from 'antd'\r\nimport anime from \"animejs\";\r\nimport {\r\n    MenuUnfoldOutlined,\r\n    MenuFoldOutlined,\r\n    DesktopOutlined,\r\n    SettingOutlined,\r\n    CodeOutlined\r\n} from '@ant-design/icons';\r\nimport React from 'react';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass DesktopNavBar extends React.Component {\r\n    state = {\r\n        collapsed: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.initialCollasped !== undefined) {\r\n            this.toggleCollapsed(this.props.initialCollasped)\r\n        } else {\r\n            this.toggleCollapsed(false)\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.toggleCollapsed(true, true)\r\n        // await anime({\r\n        //     targets: [document.getElementById('bugg-dashboard')],\r\n        //     paddingLeft: 10,\r\n        //     duration: 300,\r\n        //     easing: 'easeInOutQuad',\r\n        // }).finished\r\n        //  document.getElementById('bugg-dashboard').style.paddingLeft = '10px';\r\n    }\r\n\r\n    toggleCollapsed = async (value, willUnmount) => {\r\n        let collapsed = !this.state.collapsed;\r\n        if (typeof value === 'boolean') collapsed = value;\r\n\r\n        this.setState({\r\n            collapsed\r\n        });\r\n\r\n        let logo = document.getElementById('bugg-nav-logo');\r\n        let panel = document.getElementById('bugg-nav-background');\r\n        let button = document.getElementById('bugg-nav-collaspe-button');\r\n        let dashboard = document.getElementById('bugg-dashboard');\r\n\r\n        await animate({\r\n            logo,\r\n            collapsed,\r\n            panel,\r\n            button,\r\n            dashboard\r\n        }, willUnmount)\r\n    };\r\n\r\n    render() {\r\n        let projects = this.props.projects ?? [];\r\n        return (\r\n            <div\r\n                id=\"bugg-nav-background\"\r\n                className=\"navigation\" style={styles.navigation}>\r\n                <Space\r\n                    style={styles.Space1}\r\n                    align='center'\r\n                    direction='horizontal'\r\n                >\r\n                    <Button\r\n                        id=\"bugg-nav-collaspe-button\"\r\n                        type=\"text\"\r\n                        onClick={this.toggleCollapsed}\r\n                        style={styles.Button1}>\r\n                        {\r\n                            React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined)\r\n                        }\r\n                    </Button>\r\n                    <h2\r\n                        id=\"bugg-nav-logo\"\r\n                        style={styles.h2}>\r\n                        Bugg\r\n                    </h2>\r\n                </Space>\r\n\r\n\r\n                <Menu\r\n                    defaultSelectedKeys={['home']}\r\n                    defaultOpenKeys={['sub1']}\r\n                    mode=\"inline\"\r\n                    theme='dark'\r\n                    style={styles.Menu}\r\n                    inlineCollapsed={this.state.collapsed}\r\n                >\r\n                    <Menu.Item key=\"home\"\r\n                        onClick={() => this.props.history.push('/dashboard')}\r\n                        style={styles.Item1}\r\n                        icon={<DesktopOutlined />}>\r\n                        Home\r\n                    </Menu.Item>\r\n\r\n\r\n                    <Menu.Item key=\"settings\"\r\n                        onClick={() => this.props.history.push('/dashboard/settings')}\r\n                        style={{\r\n                            backgroundColor: 'transparent'\r\n                        }}\r\n                        icon={<SettingOutlined />}>\r\n                        Settings\r\n                    </Menu.Item>\r\n\r\n                    <SubMenu\r\n                        key=\"projects\"\r\n                        style={{\r\n                            backgroundColor: 'transparent'\r\n                        }}\r\n                        icon={<CodeOutlined />}\r\n                        title=\"Projects\"\r\n                        className=\"bugg-sub-menu\"\r\n\r\n                    >\r\n                        {\r\n                            projects.map((doc, ind) =>\r\n                                <Menu.Item\r\n                                    style={{\r\n                                        backgroundColor: 'transparent'\r\n                                    }}\r\n                                    onClick={() => this.props.history.push('/dashboard/projects/' + doc.id)}\r\n                                    //className=\"bugg-sub-menu\"\r\n                                    key={doc.id}>{doc.title}</Menu.Item>\r\n                            )\r\n                        }\r\n                    </SubMenu>\r\n\r\n                </Menu>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst animate = async (obj = {\r\n    collapsed: '',\r\n    logo: '',\r\n    panel: '',\r\n    button: '',\r\n    dashboard: ''\r\n}, willUnmount) => {\r\n    if (obj.collapsed) {\r\n        // TODO collaspe animation\r\n        await Promise.all([\r\n            anime({\r\n                targets: [obj.logo],\r\n                // color: 'rgba(0, 0, 0, .5)',\r\n                opacity: 0,\r\n                translateX: 30,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.panel],\r\n                width: 75,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.button],\r\n                translateX: 8,\r\n                duration: 100,\r\n                easing: 'easeInOutQuad',\r\n                scale: 1.2\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.dashboard],\r\n                paddingLeft: (willUnmount ? 20 : 130),\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n\r\n            }).finished,\r\n        ])\r\n\r\n\r\n\r\n\r\n\r\n    } else {\r\n        // Expand\r\n        await Promise.all([\r\n            anime({\r\n                targets: [obj.logo],\r\n                color: 'rgba(255, 255, 255, 1)',\r\n                opacity: 1,\r\n                translateX: 0,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.panel],\r\n                width: 270,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            }).finished,\r\n            anime({\r\n                delay: 0,\r\n                targets: [obj.button],\r\n                translateX: 0,\r\n                duration: 100,\r\n                easing: 'easeInOutQuad',\r\n                scale: 1\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.dashboard],\r\n                paddingLeft: 330,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n\r\n            }).finished\r\n        ])\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    Dashboard: {\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        paddingLeft: 330,\r\n        paddingBottom: 64\r\n    },\r\n    navigation: {\r\n        color: 'white',\r\n        width: 0,//270,\r\n        zIndex: 10,\r\n        'box-shadow': '-7px 0px 13px 0px black',\r\n        boxShadow: 1,\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        position: 'fixed',\r\n        left: 0,\r\n        top: 0,\r\n        height: '100%',\r\n        backgroundColor: '#0093E9',\r\n        backgroundImage: 'linear-gradient(43deg, #0093E9 0%, #80D0C7 100%)',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    Space1: {\r\n        marginTop: 30,\r\n        paddingLeft: 9,\r\n        marginBottom: 30\r\n    },\r\n    Button1: {\r\n\r\n        //marginLeft: 9, \r\n        color: 'white'\r\n    },\r\n    h2: {\r\n        // marginBottom: 30,\r\n        // marginLeft: 0,\r\n        // marginTop: 30,\r\n        margin: 0,\r\n        color: 'white',\r\n        // position: 'fixed',\r\n        top: 29,\r\n        left: 70\r\n    },\r\n    Menu: {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    Item1:\r\n    {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-between',\r\n        height: 110,\r\n        alignItems: 'center'\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(DesktopNavBar)","import { useState } from 'react';\r\nimport {\r\n    Space,\r\n    Badge,\r\n    Avatar,\r\n    Menu,\r\n    Button,\r\n    Dropdown\r\n} from 'antd'\r\n\r\nimport {\r\n    BellFilled,\r\n\r\n} from '@ant-design/icons';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\n\r\nfunction NavWelcomeHeader(props) {\r\n    const isMobile = useMediaQuery({ maxWidth: 800 });\r\n\r\n    return (\r\n        <div\r\n            className=\"header\"\r\n            style={styles.header}>\r\n            <h2 style={{\r\n                ...(isMobile ? { fontSize: 18 } : {})\r\n            }}>\r\n                {'Welcome' + (props.name ? ', ' : '') + props.name}\r\n            </h2>\r\n            <Space\r\n            // size={isMobile ? 'small' : 'large'}\r\n            //size={(isMobile ? 'small' : 'large')}\r\n            >\r\n                <Badge\r\n                    offset={[-4, 8]}\r\n                    count={props.unreadNotifications}>\r\n                    <Button\r\n                        type='default'\r\n                        shape='circle'\r\n                        size='large'\r\n                        style={{\r\n                            transform: 'scale(1.2)',\r\n                            color: 'rgba(0,0,0,.7)',\r\n\r\n                        }}\r\n\r\n                        onClick={props.toggleNotificationDrawer}\r\n                        icon={<BellFilled\r\n                            style={{\r\n                                //fontSize: 64\r\n                            }} />}\r\n                    />\r\n                </Badge>\r\n\r\n                <style>\r\n                    {`\r\n            .bugg-profile-pic:hover {\r\n                cursor: pointer;\r\n            }\r\n            `}\r\n                </style>\r\n                <Dropdown\r\n                    //overlay={<AvatarSettings />}\r\n                    overlay={menu({ logout: props.logout })}\r\n                    trigger={['click']}\r\n                >\r\n\r\n                    <Avatar\r\n                        className=\"bugg-profile-pic\"\r\n                        size={isMobile ? 50 : 50}\r\n                        src={props.userIconUri}\r\n                        //icon={<UserOutlined />} \r\n\r\n                        style={{\r\n                            marginRight: 64,\r\n                            borderWidth: 1,\r\n                            borderColor: 'rgba(0,0,0,.2)',\r\n                            borderStyle: 'solid',\r\n                            ...(isMobile ? { marginRight: 10 } : {})\r\n                        }} />\r\n\r\n\r\n                </Dropdown>\r\n\r\n            </Space>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst menu = (props) => (\r\n    <Menu style={{\r\n        width: 150,\r\n    }}>\r\n        <Menu.Item\r\n            onClick={props.logout}\r\n            style={{\r\n                color: 'red'\r\n            }}\r\n            key=\"0\">\r\n            Logout\r\n        </Menu.Item>\r\n\r\n    </Menu>\r\n);\r\n\r\nconst styles = {\r\n    header: {\r\n        width: '100%',\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-between',\r\n        height: 110,\r\n        alignItems: 'center'\r\n    }\r\n}\r\n\r\nconst mobileStyles = {\r\n\r\n}\r\n\r\nexport default NavWelcomeHeader","import { withRouter } from 'react-router-dom';\r\nimport { Space, Button, Menu } from 'antd'\r\nimport anime from \"animejs\";\r\nimport {\r\n    MenuUnfoldOutlined,\r\n    MenuFoldOutlined,\r\n    DesktopOutlined,\r\n    SettingOutlined,\r\n    CodeOutlined\r\n} from '@ant-design/icons';\r\nimport React from 'react';\r\nconst { SubMenu } = Menu;\r\n\r\nclass MobileNavBar extends React.Component {\r\n    state = {\r\n        collapsed: true,\r\n    }\r\n\r\n\r\n    toggleCollapsed = async () => {\r\n        let backdrop = document.getElementById('bugg-mobile-nav-backdrop');\r\n        // backdrop.style.display = 'block';\r\n        // backdrop.style.opacity = 1;\r\n\r\n\r\n\r\n        let collapsed = !this.state.collapsed;\r\n\r\n        this.setState({\r\n            collapsed\r\n        });\r\n\r\n        let logo = document.getElementById('bugg-nav-logo-mobile');\r\n        let panel = document.getElementById('bugg-nav-background-mobile');\r\n        let button = document.getElementById('bugg-nav-collaspe-button-mobile');\r\n        let dashboard = document.getElementById('bugg-dashboard');\r\n\r\n        try {\r\n            await animate({\r\n                logo,\r\n                collapsed,\r\n                panel,\r\n                button,\r\n                dashboard,\r\n                backdrop\r\n            })\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n\r\n    };\r\n\r\n    navigateTo = (pathname) => {\r\n        this.props.history.push(pathname);\r\n        this.toggleCollapsed()\r\n    }\r\n\r\n\r\n    render() {\r\n        let projects = this.props.projects ?? [];\r\n        return (\r\n            <>\r\n                <div style={{\r\n                    height: 64,\r\n                    borderColor: 'rgba(0,0,0,.1)',\r\n                    borderWidth: 0,\r\n                    borderBottomWidth: 1,\r\n                    borderStyle: 'solid',\r\n                    marginLeft: -20,\r\n                    marginRight: -10\r\n\r\n                }}>\r\n                    <div\r\n\r\n                        style={{\r\n                            height: 64,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center',\r\n                            paddingLeft: 20,\r\n                            gap: 15,\r\n                            zIndex: 100,\r\n                            position: 'fixed',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            boxShadow: 'black 0px -4px 13px 0px',\r\n                            backgroundImage: 'linear-gradient( 43deg, rgb(0, 147, 233) 0%, rgb(128, 208, 199) 100%)',\r\n                            backgroundColor: 'rgb(0, 147, 233)'\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            type='ghost'\r\n                            //type=\"text\"\r\n                            onClick={this.toggleCollapsed}\r\n                            style={styles.Button1}>\r\n                            {this.state.collapsed ? <MenuUnfoldOutlined style={{ color: 'white' }} /> : <MenuFoldOutlined style={{ color: 'white' }} />}\r\n\r\n                        </Button>\r\n                        <h3 style={{ margin: 0, color: 'white' }}>Bugg</h3>\r\n                    </div>\r\n\r\n                </div>\r\n                <div\r\n                    id=\"bugg-nav-background-mobile\"\r\n                    // className=\"navigation\"\r\n                    style={{\r\n                        ...styles.navigation,\r\n                        transform: 'translateX(-270px)'\r\n\r\n                    }}>\r\n                    <Space\r\n                        style={styles.Space1}\r\n                        align='center'\r\n                        direction='horizontal'\r\n                    >\r\n                        <Button\r\n                            id=\"bugg-nav-collaspe-button-mobile\"\r\n                            type=\"text\"\r\n                            onClick={this.toggleCollapsed}\r\n                            style={styles.Button1}>\r\n                            {\r\n                                React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined)\r\n                            }\r\n                        </Button>\r\n                        <h2\r\n                            id=\"bugg-nav-logo-mobile\"\r\n                            style={styles.h2}>\r\n                            Bugg\r\n                        </h2>\r\n                    </Space>\r\n\r\n\r\n                    <Menu\r\n                        defaultSelectedKeys={['home']}\r\n                        defaultOpenKeys={['projects']}\r\n                        mode=\"inline\"\r\n                        theme='dark'\r\n                        style={styles.Menu}\r\n                        inlineCollapsed={this.state.collapsed}\r\n                    >\r\n                        <Menu.Item key=\"home\"\r\n                            onClick={() => this.navigateTo('/dashboard')}\r\n                            style={styles.Item1}\r\n                            icon={<DesktopOutlined />}>\r\n                            Home\r\n                        </Menu.Item>\r\n\r\n\r\n                        <Menu.Item key=\"settings\"\r\n                            onClick={() => this.navigateTo('/dashboard/settings')}\r\n                            style={{\r\n                                backgroundColor: 'transparent'\r\n                            }}\r\n                            icon={<SettingOutlined />}>\r\n                            Settings\r\n                        </Menu.Item>\r\n\r\n                        <SubMenu\r\n                            key=\"projects\"\r\n                            style={{\r\n                                backgroundColor: 'transparent'\r\n                            }}\r\n                            icon={<CodeOutlined />}\r\n                            title=\"Projects\"\r\n                            className=\"bugg-sub-menu\"\r\n\r\n                        >\r\n                            {\r\n                                projects.map((doc, ind) =>\r\n                                    <Menu.Item\r\n                                        style={{\r\n                                            backgroundColor: 'transparent'\r\n                                        }}\r\n                                        onClick={() => this.navigateTo('/dashboard/projects/' + doc.id)}\r\n                                        //className=\"bugg-sub-menu\"\r\n                                        key={doc.id}>{doc.title}</Menu.Item>\r\n                                )\r\n                            }\r\n                        </SubMenu>\r\n\r\n                    </Menu>\r\n\r\n\r\n\r\n                </div>\r\n                <div\r\n                    onClick={() => {\r\n                        if (this.state.collapsed === false) {\r\n                            this.toggleCollapsed()\r\n                        }\r\n                    }}\r\n                    id=\"bugg-mobile-nav-backdrop\"\r\n                    style={{\r\n                        display: 'none',\r\n                        opacity: 0,\r\n                        position: 'fixed',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        backgroundColor: 'rgba(0 0 0 / 50%)',\r\n                        zIndex: 10000000,\r\n                    }}\r\n                >dsadsa\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst animate = async (obj = {\r\n    collapsed: '',\r\n    logo: '',\r\n    panel: '',\r\n    button: '',\r\n    dashboard: '',\r\n    backdrop: ''\r\n}, willUnmount) => {\r\n    if (obj.collapsed) {\r\n        // TODO collaspe animation\r\n\r\n\r\n        await Promise.all([\r\n            anime({\r\n                targets: [obj.logo],\r\n                // color: 'rgba(0, 0, 0, .5)',\r\n                opacity: 0,\r\n                translateX: 30,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.panel],\r\n                translateX: -270,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.button],\r\n                translateX: 8,\r\n                duration: 100,\r\n                easing: 'easeInOutQuad',\r\n                scale: 1.2\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.backdrop],\r\n                opacity: 0,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n\r\n            }).finished,\r\n        ])\r\n        obj.backdrop.style.display = 'none'\r\n\r\n\r\n\r\n\r\n    } else {\r\n        // Expand\r\n        obj.backdrop.style.display = 'block';\r\n        await Promise.all([\r\n            anime({\r\n                targets: [obj.logo],\r\n                color: 'rgba(255, 255, 255, 1)',\r\n                opacity: 1,\r\n                translateX: 0,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.panel],\r\n                translateX: 0,\r\n                easing: 'easeInOutQuad',\r\n                duration: 300\r\n            }).finished,\r\n            anime({\r\n                delay: 0,\r\n                targets: [obj.button],\r\n                translateX: 0,\r\n                duration: 100,\r\n                easing: 'easeInOutQuad',\r\n                scale: 1\r\n            }).finished,\r\n            anime({\r\n                targets: [obj.backdrop],\r\n                opacity: 1,\r\n                duration: 300,\r\n                easing: 'easeInOutQuad',\r\n\r\n            }).finished,\r\n        ])\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    Dashboard: {\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        paddingLeft: 330,\r\n        paddingBottom: 64\r\n    },\r\n    navigation: {\r\n        color: 'white',\r\n        width: 270,\r\n        zIndex: 100000000,\r\n        'box-shadow': '-7px 0px 13px 0px black',\r\n        boxShadow: 1,\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        position: 'fixed',\r\n        left: 0,\r\n        top: 0,\r\n        height: '100%',\r\n        backgroundColor: '#0093E9',\r\n        backgroundImage: 'linear-gradient(43deg, #0093E9 0%, #80D0C7 100%)',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    Space1: {\r\n        marginTop: 30,\r\n        paddingLeft: 9,\r\n        marginBottom: 30\r\n    },\r\n    Button1: {\r\n\r\n        //marginLeft: 9, \r\n        color: 'white'\r\n    },\r\n    h2: {\r\n        // marginBottom: 30,\r\n        // marginLeft: 0,\r\n        // marginTop: 30,\r\n        margin: 0,\r\n        color: 'white',\r\n        // position: 'fixed',\r\n        top: 29,\r\n        left: 70\r\n    },\r\n    Menu: {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    Item1:\r\n    {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-between',\r\n        height: 110,\r\n        alignItems: 'center'\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MobileNavBar)","import React from 'react';\r\nimport {\r\n    Route,\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport SkeletonProject from './sub-pages/SkeletonProject';\r\nimport {\r\n    Menu,\r\n    Drawer,\r\n    notification,\r\n    message\r\n} from 'antd';\r\nimport Home from './../components/Home';\r\nimport Settings from './Settings';\r\nimport Notifications from './Notifications';\r\nimport Messages from './Messages';\r\nimport axios from 'axios';\r\nimport MediaQuery from 'react-responsive';\r\nimport DesktopNavBar from '../components/DesktopNavBar';\r\nimport NavWelcomeHeader from '../components/NavWelcomeHeader';\r\nimport MobileNavBar from '../components/MobileNavBar';\r\nimport { getErrorMessage, logErrorMessage } from './../libraries/network-error-handling';\r\nimport { baseUrl, getDefaultHeader } from './config';\r\nimport bugg from '../libraries/bugg';\r\nimport { addEventListener, removeEventListener, reconfigToken, unsubscribeFromMessages } from './../libraries/socket';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthed: false,\r\n            collapsed: false,\r\n            toggleDrawer: false,\r\n            projects: [],\r\n            socket: null,\r\n            name: '',\r\n            userIconUri: '',\r\n            unreadNotifications: 0,\r\n            activeConversationIds: [],\r\n            initialStyles: {\r\n\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    setActiveConversationIds = (value) => this.setState({ activeConversationIds: value })\r\n\r\n    fetchUnreadNotifications = async () => {\r\n\r\n        try {\r\n            let unreadNotifications = await bugg.Notification.getUnreadNotifications();\r\n\r\n            this.setState({\r\n                unreadNotifications\r\n            })\r\n        } catch (e) {\r\n            // alert(getErrorMessage(e))\r\n            logErrorMessage(e)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProjects()\r\n        this.getWelcomeMessage();\r\n        reconfigToken()\r\n        this.fetchUnreadNotifications()\r\n        addEventListener('new-notification', this.onRecieveNotitification)\r\n    }\r\n\r\n    handleErrorTest = async () => {\r\n        try {\r\n            await axios.get('/throw-error')\r\n        } catch (e) {\r\n            let message = getErrorMessage(e);\r\n            console.log(message)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            this.updateProjects()\r\n        }\r\n    }\r\n\r\n\r\n    openNewMessage = () => undefined;\r\n\r\n    setOpenNewMessage = (func) => {\r\n        this.openNewMessage = (conversationId) => {\r\n            func(conversationId)\r\n            this.setState({\r\n                toggleDrawer: false\r\n            })\r\n        };\r\n    }\r\n\r\n    logout = () => {\r\n        let token = window.localStorage.getItem('token');\r\n        unsubscribeFromMessages(token);\r\n        window.localStorage.removeItem('token');\r\n        this.props.history.push('/auth')\r\n    }\r\n\r\n    updateProjects = async () => {\r\n        try {\r\n            let { data } = await axios.get('/project/all', {\r\n                headers: getDefaultHeader()\r\n            });\r\n            this.setState({\r\n                projects: data.projects\r\n            });\r\n            // console.log(data.projects)\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n    getAction = (notification) => {\r\n        switch (notification.type) {\r\n            case 'PROJECT_INVITE':\r\n                this.joinProject(notification.payload.projectId)\r\n                break;\r\n            case 'NEW_MESSAGE':\r\n                this.openNewMessage(notification.payload.conversationId);\r\n                break;\r\n            case 'NEW_BUG':\r\n                this.props.history\r\n                    .push('/dashboard/projects/' + notification.payload.projectId + `?action=OPEN_BUG&bugId=${notification.payload.bugId}`);\r\n                this.setState({\r\n                    toggleDrawer: false\r\n                })\r\n                break;\r\n            case 'NEW_ANNOUNCEMENT':\r\n                this.props.history\r\n                    .push('/dashboard/projects/' + notification.payload.projectId + `?action=OPEN_ANNOUNCEMENT&announcementId=${notification.payload.announcementId}`);\r\n                this.setState({\r\n                    toggleDrawer: false\r\n                })\r\n                break;\r\n            default:\r\n                message.error(\"no type given\")\r\n        }\r\n    }\r\n\r\n\r\n    getNotificationCallToAction = (type) => {\r\n        let messages = {\r\n            'PROJECT_INVITE': ' Click this notification to join.',\r\n            'NEW_MESSAGE': ' Click this notification to view.',\r\n        }\r\n\r\n        return messages[type] ?? ' Click this notification to view.'\r\n    }\r\n\r\n    onRecieveNotitification = (notif) => {\r\n        // alert('SHIT')\r\n        this.fetchUnreadNotifications()\r\n        if (notif.type === 'NEW_MESSAGE' && this.state.activeConversationIds.includes(notif.payload.conversationId)) return\r\n\r\n        notification.open({\r\n            message: notif.title,\r\n            description: notif.description + this.getNotificationCallToAction(notif.type),\r\n            onClick: () => {\r\n                this.getAction(notif)\r\n                this.dismissNotification(notif.id)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Dismisses notification on server\r\n     * @param {string} notificationId Id of notification\r\n     */\r\n    dismissNotification = async (notificationId) => {\r\n        try {\r\n            await axios.delete(baseUrl + '/notification/' + notificationId, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            this.fetchUnreadNotifications()\r\n\r\n        } catch (e) {\r\n            logErrorMessage(e)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeEventListener('new-notification', this.onRecieveNotitification)\r\n    }\r\n\r\n    getWelcomeMessage = async () => {\r\n        let formatName = (name) => {\r\n            var nameSegments = name.split(' ');\r\n            let shortHandName = nameSegments[0];\r\n\r\n            if (nameSegments[1]) {\r\n                shortHandName += ' ' + nameSegments[1].substring(0, 1).toUpperCase() + '.'\r\n            }\r\n\r\n            return shortHandName\r\n        }\r\n        try {\r\n            let user = await bugg.User.getMe();\r\n            let userIconUri = await bugg.User.getUserIconUri();\r\n            this.setState({\r\n                name: formatName(user.name),\r\n                userIconUri\r\n            });\r\n        } catch (e) {\r\n            console.error(getErrorMessage(e))\r\n        }\r\n    }\r\n\r\n\r\n    joinProject = async (projectId) => {\r\n\r\n        try {\r\n            let { data } = await axios.post('/project/join', {\r\n                projectId\r\n            }, {\r\n                headers: getDefaultHeader()\r\n            })\r\n            notification.success({\r\n                message: 'You have joined project ' + data.project.title + '!'\r\n            })\r\n            this.updateProjects();\r\n        } catch (e) {\r\n            logErrorMessage(e);\r\n            notification.error({\r\n                message: getErrorMessage(e)\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <MediaQuery maxWidth={800}>\r\n                {(isMobile) =>\r\n                    <div\r\n                        id=\"bugg-dashboard\"\r\n                        className=\"Dashboard\" style={{\r\n                            // display: isMobile ? 'inline-flex',\r\n                            width: '100%',\r\n                            paddingLeft: 20,//330,\r\n                            paddingRight: 10,\r\n                            paddingBottom: 64\r\n                        }}>\r\n                        {!isMobile &&\r\n                            <DesktopNavBar projects={this.state.projects} />\r\n                        }\r\n                        {\r\n                            isMobile &&\r\n                            <MobileNavBar projects={this.state.projects} />\r\n                        }\r\n                        <div className=\"main-wrapper\" style={{\r\n                            flex: 1\r\n                        }}>\r\n\r\n                            <NavWelcomeHeader\r\n                                name={this.state.name}\r\n                                unreadNotifications={this.state.unreadNotifications}\r\n                                logout={this.logout}\r\n                                userIconUri={this.state.userIconUri}\r\n                                toggleNotificationDrawer={() => this.setState({ toggleDrawer: true })}\r\n                            />\r\n                            <Route exact path=\"/dashboard\">\r\n\r\n                                <Home\r\n                                    projects={this.state.projects}\r\n                                    updateProjects={this.updateProjects}\r\n                                />\r\n                                {/* <Overview /> */}\r\n                            </Route>\r\n                            <Route path='/dashboard/settings'>\r\n                                <Settings getWelcomeMessage={this.getWelcomeMessage} />\r\n                            </Route>\r\n                            <Route path=\"/dashboard/projects/:projectId\">\r\n                                <SkeletonProject updateProjects={this.updateProjects} />\r\n                            </Route>\r\n                        </div>\r\n                        {\r\n                            // move to react hook for media query\r\n                        }\r\n                        <Drawer\r\n                            // {...notificationDrawerProps}\r\n                            // width={500}\r\n\r\n                            width={isMobile ? '90%' : 500}\r\n                            title=\"Notifications\"\r\n                            placement=\"right\"\r\n                            closable={true}\r\n                            onClose={() => {\r\n                                this.fetchUnreadNotifications()\r\n                                this.setState({ toggleDrawer: false })\r\n                            }}\r\n                            destroyOnClose={true}\r\n                            visible={this.state.toggleDrawer}\r\n                        >\r\n                            <Notifications\r\n                                close={() => {\r\n                                    this.fetchUnreadNotifications()\r\n                                    this.setState({ toggleDrawer: false })\r\n                                }}\r\n                                openNewMessage={this.openNewMessage}\r\n                                joinProject={this.joinProject}\r\n                                socket={this.state.socket}\r\n                            />\r\n                        </Drawer>\r\n\r\n                        <Messages\r\n                            isMobile={isMobile}\r\n                            setActiveConversationIds={this.setActiveConversationIds}\r\n                            setOpenNewMessage={this.setOpenNewMessage}\r\n                            fetchUnreadNotifications={this.fetchUnreadNotifications} />\r\n                    </div >\r\n                }\r\n            </MediaQuery>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\nimport Authentication from './pages/Authentication';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Dashboard from './pages/Dashboard';\nimport './App.less';\nimport axios from 'axios';\nimport { baseUrl } from './pages/config';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthed: false\n    };\n\n  }\n\n  componentDidMount() {\n    if (window.localStorage.getItem('token')) {\n\n      this.setState({\n        isAuthed: true\n      })\n    }\n  }\n\n  render() {\n    let isAuthed = (window.localStorage.getItem('token') !== null);\n    axios.defaults.baseURL = baseUrl;\n    return (\n      <Router>\n        {\n\n          !isAuthed ? <Redirect to=\"/auth\" /> : null\n        }\n        {\n          (() => {\n            if (window.location.pathname.indexOf('dashboard') !== -1 && isAuthed) {\n              return false;\n            } else if (isAuthed) {\n              return true\n            } else {\n              return false\n            }\n          })() ? <Redirect to=\"dashboard\" /> : null\n        }\n        <Switch>\n          <Route path='/auth'>\n            <Authentication />\n          </Route>\n          <Route path='/dashboard'>\n            <Dashboard />\n          </Route>\n        </Switch>\n      </Router>\n\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}